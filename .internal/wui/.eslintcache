[{"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/index.js":"1","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/App.js":"2","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/index.js":"3","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/router.jsx":"4","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/counter.js":"5","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplatesReducer.js":"6","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplateListReducer.js":"7","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getNetworkTemplateListReducer.js":"8","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/updateSelectedServicesReducer.js":"9","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceMetadataReducer.js":"10","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getBuildIssuesReducer.js":"11","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceConfigOptionsReducer.js":"12","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getBuildHistoryListReducer.js":"13","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/updateSelectedFilterTagsReducer.js":"14","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getScriptTemplatesReducer.js":"15","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/buildStackReducer.js":"16","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/middlewares/asyncDispatchMiddleware.js":"17","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/middlewares/promiseMiddleware.js":"18","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/constants.js":"19","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceTemplates.action.js":"20","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceTemplateList.action.js":"21","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getNetworkTemplateList.action.js":"22","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/updateSelectedServices.action.js":"23","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getBuildHistoryList.action.js":"24","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/checkBuildIssues.action.js":"25","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceMetadata.action.js":"26","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getScript.action.js":"27","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceConfigOptions.action.js":"28","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/updateFilterTags.action.js":"29","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/buildStack.action.js":"30","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/notFound/index.js":"31","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/Sidebar/index.js":"32","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/mainBuild/index.jsx":"33","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/buildHistory/index.jsx":"34","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/scripts/index.jsx":"35","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/help/index.jsx":"36","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/builds.js":"37","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/templates.js":"38","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/configs.js":"39","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/buildOptionSync.js":"40","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/config.js":"41","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/buildHistoryGridItem/index.jsx":"42","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/servicesGridItem/index.jsx":"43","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/BuildSidebar/index.jsx":"44","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/downloadBuild.action.js":"45","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/buildCompletedModal/index.jsx":"46","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceConfigModal/index.jsx":"47","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/configOptionLoader.jsx":"48","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/index.js":"49","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/networkConfig.jsx":"50","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/logging.jsx":"51","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/portConfig.jsx":"52","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/volumesConfig.jsx":"53","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/parsers.js":"54","/home/slyke/repos/IOTstack/.internal/wui/src/index.js":"55","/home/slyke/repos/IOTstack/.internal/wui/src/App.js":"56","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/index.js":"57","/home/slyke/repos/IOTstack/.internal/wui/src/router.jsx":"58","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/counter.js":"59","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplateListReducer.js":"60","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplatesReducer.js":"61","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getNetworkTemplateListReducer.js":"62","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getServiceMetadataReducer.js":"63","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getServiceConfigOptionsReducer.js":"64","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/updateSelectedServicesReducer.js":"65","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/updateSelectedFilterTagsReducer.js":"66","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getBuildIssuesReducer.js":"67","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/buildStackReducer.js":"68","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getBuildHistoryListReducer.js":"69","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getScriptTemplatesReducer.js":"70","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/middlewares/promiseMiddleware.js":"71","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/middlewares/asyncDispatchMiddleware.js":"72","/home/slyke/repos/IOTstack/.internal/wui/src/constants.js":"73","/home/slyke/repos/IOTstack/.internal/wui/src/pages/notFound/index.js":"74","/home/slyke/repos/IOTstack/.internal/wui/src/features/Sidebar/index.js":"75","/home/slyke/repos/IOTstack/.internal/wui/src/actions/getServiceTemplateList.action.js":"76","/home/slyke/repos/IOTstack/.internal/wui/src/actions/getServiceTemplates.action.js":"77","/home/slyke/repos/IOTstack/.internal/wui/src/actions/getNetworkTemplateList.action.js":"78","/home/slyke/repos/IOTstack/.internal/wui/src/actions/getServiceConfigOptions.action.js":"79","/home/slyke/repos/IOTstack/.internal/wui/src/actions/getServiceMetadata.action.js":"80","/home/slyke/repos/IOTstack/.internal/wui/src/actions/updateSelectedServices.action.js":"81","/home/slyke/repos/IOTstack/.internal/wui/src/actions/updateFilterTags.action.js":"82","/home/slyke/repos/IOTstack/.internal/wui/src/actions/checkBuildIssues.action.js":"83","/home/slyke/repos/IOTstack/.internal/wui/src/actions/getBuildHistoryList.action.js":"84","/home/slyke/repos/IOTstack/.internal/wui/src/actions/buildStack.action.js":"85","/home/slyke/repos/IOTstack/.internal/wui/src/actions/getScript.action.js":"86","/home/slyke/repos/IOTstack/.internal/wui/src/pages/mainBuild/index.jsx":"87","/home/slyke/repos/IOTstack/.internal/wui/src/pages/buildHistory/index.jsx":"88","/home/slyke/repos/IOTstack/.internal/wui/src/pages/scripts/index.jsx":"89","/home/slyke/repos/IOTstack/.internal/wui/src/pages/help/index.jsx":"90","/home/slyke/repos/IOTstack/.internal/wui/src/services/templates.js":"91","/home/slyke/repos/IOTstack/.internal/wui/src/services/configs.js":"92","/home/slyke/repos/IOTstack/.internal/wui/src/services/builds.js":"93","/home/slyke/repos/IOTstack/.internal/wui/src/utils/buildOptionSync.js":"94","/home/slyke/repos/IOTstack/.internal/wui/src/config.js":"95","/home/slyke/repos/IOTstack/.internal/wui/src/features/servicesGridItem/index.jsx":"96","/home/slyke/repos/IOTstack/.internal/wui/src/features/buildHistoryGridItem/index.jsx":"97","/home/slyke/repos/IOTstack/.internal/wui/src/features/BuildSidebar/index.jsx":"98","/home/slyke/repos/IOTstack/.internal/wui/src/actions/downloadBuild.action.js":"99","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceConfigModal/index.jsx":"100","/home/slyke/repos/IOTstack/.internal/wui/src/features/buildCompletedModal/index.jsx":"101","/home/slyke/repos/IOTstack/.internal/wui/src/utils/configOptionLoader.jsx":"102","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/index.js":"103","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/portConfig.jsx":"104","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/networkConfig.jsx":"105","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/logging.jsx":"106","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/volumesConfig.jsx":"107","/home/slyke/repos/IOTstack/.internal/wui/src/utils/parsers.js":"108","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/environmentConfig.jsx":"109","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/devicesConfig.jsx":"110","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getAllServicesMetadataReducer.js":"111","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getAllServicesConfigOptionsReducer.js":"112","/home/slyke/repos/IOTstack/.internal/wui/src/actions/getAllServicesMetadata.action.js":"113","/home/slyke/repos/IOTstack/.internal/wui/src/actions/getAllServicesConfigOptions.action.js":"114"},{"size":353,"mtime":1606908594887,"results":"115","hashOfConfig":"116"},{"size":789,"mtime":1607430281547,"results":"117","hashOfConfig":"116"},{"size":1612,"mtime":1610356071552,"results":"118","hashOfConfig":"116"},{"size":1231,"mtime":1610350276543,"results":"119","hashOfConfig":"116"},{"size":1551,"mtime":1606908622214,"results":"120","hashOfConfig":"116"},{"size":962,"mtime":1610356100446,"results":"121","hashOfConfig":"116"},{"size":972,"mtime":1610350671817,"results":"122","hashOfConfig":"116"},{"size":972,"mtime":1610352205750,"results":"123","hashOfConfig":"116"},{"size":1105,"mtime":1607294167538,"results":"124","hashOfConfig":"116"},{"size":1878,"mtime":1607294201436,"results":"125","hashOfConfig":"116"},{"size":894,"mtime":1607816383799,"results":"126","hashOfConfig":"116"},{"size":1922,"mtime":1609913154250,"results":"127","hashOfConfig":"116"},{"size":947,"mtime":1607430599186,"results":"128","hashOfConfig":"116"},{"size":1079,"mtime":1607529487594,"results":"129","hashOfConfig":"116"},{"size":1714,"mtime":1608802587649,"results":"130","hashOfConfig":"116"},{"size":902,"mtime":1608450868778,"results":"131","hashOfConfig":"116"},{"size":607,"mtime":1607109560543,"results":"132","hashOfConfig":"116"},{"size":711,"mtime":1607260096944,"results":"133","hashOfConfig":"116"},{"size":160,"mtime":1607109631094,"results":"134","hashOfConfig":"116"},{"size":340,"mtime":1610354130554,"results":"135","hashOfConfig":"116"},{"size":369,"mtime":1610350419464,"results":"136","hashOfConfig":"116"},{"size":369,"mtime":1610351960667,"results":"137","hashOfConfig":"116"},{"size":534,"mtime":1607292532075,"results":"138","hashOfConfig":"116"},{"size":340,"mtime":1607430711272,"results":"139","hashOfConfig":"116"},{"size":358,"mtime":1607816378529,"results":"140","hashOfConfig":"116"},{"size":375,"mtime":1607260125923,"results":"141","hashOfConfig":"116"},{"size":390,"mtime":1608850637136,"results":"142","hashOfConfig":"116"},{"size":419,"mtime":1609913346831,"results":"143","hashOfConfig":"116"},{"size":540,"mtime":1607529608604,"results":"144","hashOfConfig":"116"},{"size":394,"mtime":1608448546580,"results":"145","hashOfConfig":"116"},{"size":206,"mtime":1607342162060,"results":"146","hashOfConfig":"116"},{"size":4770,"mtime":1607430353516,"results":"147","hashOfConfig":"116"},{"size":3836,"mtime":1610356472899,"results":"148","hashOfConfig":"116"},{"size":1626,"mtime":1610349813009,"results":"149","hashOfConfig":"116"},{"size":213,"mtime":1607342531957,"results":"150","hashOfConfig":"116"},{"size":204,"mtime":1607342542038,"results":"151","hashOfConfig":"116"},{"size":5471,"mtime":1608852677675,"results":"152","hashOfConfig":"116"},{"size":5035,"mtime":1610354111429,"results":"153","hashOfConfig":"116"},{"size":2528,"mtime":1609913218191,"results":"154","hashOfConfig":"116"},{"size":2379,"mtime":1610267137497,"results":"155","hashOfConfig":"116"},{"size":98,"mtime":1610733891137,"results":"156","hashOfConfig":"116"},{"size":3558,"mtime":1610347837498,"results":"157","hashOfConfig":"116"},{"size":11600,"mtime":1610356264839,"results":"158","hashOfConfig":"116"},{"size":10365,"mtime":1610350599948,"results":"159","hashOfConfig":"116"},{"size":318,"mtime":1608852934388,"results":"160","hashOfConfig":"116"},{"size":3624,"mtime":1610275595190,"results":"161","hashOfConfig":"116"},{"size":3907,"mtime":1610440735107,"results":"162","hashOfConfig":"116"},{"size":1438,"mtime":1611364238145,"results":"163","hashOfConfig":"116"},{"size":261,"mtime":1611364236143,"results":"164","hashOfConfig":"116"},{"size":2716,"mtime":1610613869470,"results":"165","hashOfConfig":"116"},{"size":1630,"mtime":1610614530760,"results":"166","hashOfConfig":"116"},{"size":2975,"mtime":1610540007725,"results":"167","hashOfConfig":"116"},{"size":2915,"mtime":1611426491458,"results":"168","hashOfConfig":"116"},{"size":2145,"mtime":1611366674505,"results":"169","hashOfConfig":"116"},{"size":353,"mtime":1611426633820,"results":"170","hashOfConfig":"171"},{"size":789,"mtime":1611426633820,"results":"172","hashOfConfig":"171"},{"size":1904,"mtime":1613202051760,"results":"173","hashOfConfig":"171"},{"size":1231,"mtime":1611426633830,"results":"174","hashOfConfig":"171"},{"size":1551,"mtime":1611426633860,"results":"175","hashOfConfig":"171"},{"size":972,"mtime":1611426633850,"results":"176","hashOfConfig":"171"},{"size":962,"mtime":1611426633850,"results":"177","hashOfConfig":"171"},{"size":972,"mtime":1611426633840,"results":"178","hashOfConfig":"171"},{"size":1878,"mtime":1611426633870,"results":"179","hashOfConfig":"171"},{"size":1922,"mtime":1611426633840,"results":"180","hashOfConfig":"171"},{"size":1105,"mtime":1611426633860,"results":"181","hashOfConfig":"171"},{"size":1079,"mtime":1611426633880,"results":"182","hashOfConfig":"171"},{"size":894,"mtime":1611426633870,"results":"183","hashOfConfig":"171"},{"size":902,"mtime":1611426633830,"results":"184","hashOfConfig":"171"},{"size":947,"mtime":1611426633840,"results":"185","hashOfConfig":"171"},{"size":1714,"mtime":1611426633870,"results":"186","hashOfConfig":"171"},{"size":711,"mtime":1611426633890,"results":"187","hashOfConfig":"171"},{"size":607,"mtime":1611426633890,"results":"188","hashOfConfig":"171"},{"size":160,"mtime":1611426633820,"results":"189","hashOfConfig":"171"},{"size":206,"mtime":1611426633770,"results":"190","hashOfConfig":"171"},{"size":4770,"mtime":1611426633670,"results":"191","hashOfConfig":"171"},{"size":369,"mtime":1611426633740,"results":"192","hashOfConfig":"171"},{"size":340,"mtime":1611426633720,"results":"193","hashOfConfig":"171"},{"size":369,"mtime":1611426633700,"results":"194","hashOfConfig":"171"},{"size":419,"mtime":1611426633720,"results":"195","hashOfConfig":"171"},{"size":375,"mtime":1611426633720,"results":"196","hashOfConfig":"171"},{"size":534,"mtime":1611426633730,"results":"197","hashOfConfig":"171"},{"size":540,"mtime":1611426633730,"results":"198","hashOfConfig":"171"},{"size":358,"mtime":1611426633710,"results":"199","hashOfConfig":"171"},{"size":340,"mtime":1611426633710,"results":"200","hashOfConfig":"171"},{"size":394,"mtime":1611426633730,"results":"201","hashOfConfig":"171"},{"size":390,"mtime":1611426633710,"results":"202","hashOfConfig":"171"},{"size":4866,"mtime":1613202225890,"results":"203","hashOfConfig":"171"},{"size":1626,"mtime":1611426633750,"results":"204","hashOfConfig":"171"},{"size":213,"mtime":1611426633780,"results":"205","hashOfConfig":"171"},{"size":204,"mtime":1611426633760,"results":"206","hashOfConfig":"171"},{"size":5035,"mtime":1611426633790,"results":"207","hashOfConfig":"171"},{"size":4487,"mtime":1613178725120,"results":"208","hashOfConfig":"171"},{"size":5471,"mtime":1611426633800,"results":"209","hashOfConfig":"171"},{"size":2379,"mtime":1611426633810,"results":"210","hashOfConfig":"171"},{"size":98,"mtime":1611426633680,"results":"211","hashOfConfig":"171"},{"size":10707,"mtime":1613203744090,"results":"212","hashOfConfig":"171"},{"size":3558,"mtime":1611426633600,"results":"213","hashOfConfig":"171"},{"size":10525,"mtime":1613203342050,"results":"214","hashOfConfig":"171"},{"size":318,"mtime":1611426633700,"results":"215","hashOfConfig":"171"},{"size":3878,"mtime":1611445663360,"results":"216","hashOfConfig":"171"},{"size":3624,"mtime":1611426633670,"results":"217","hashOfConfig":"171"},{"size":1870,"mtime":1612130327410,"results":"218","hashOfConfig":"171"},{"size":389,"mtime":1612130452410,"results":"219","hashOfConfig":"171"},{"size":2993,"mtime":1612150221810,"results":"220","hashOfConfig":"171"},{"size":4746,"mtime":1612423080560,"results":"221","hashOfConfig":"171"},{"size":1657,"mtime":1612131016720,"results":"222","hashOfConfig":"171"},{"size":3070,"mtime":1612150262840,"results":"223","hashOfConfig":"171"},{"size":2977,"mtime":1612602317250,"results":"224","hashOfConfig":"171"},{"size":3735,"mtime":1612135842030,"results":"225","hashOfConfig":"171"},{"size":2664,"mtime":1613114342660,"results":"226","hashOfConfig":"171"},{"size":972,"mtime":1613178582360,"results":"227","hashOfConfig":"171"},{"size":1011,"mtime":1613201638300,"results":"228","hashOfConfig":"171"},{"size":366,"mtime":1613201724290,"results":"229","hashOfConfig":"171"},{"size":410,"mtime":1613201736700,"results":"230","hashOfConfig":"171"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},"fw5a4t",{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"233"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"233"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"233"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"233"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"233"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"233"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"233"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"233"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"233"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"233"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},"1pdcxu",{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"351"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"351"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"351"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"351"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"351"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"351"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"351"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"351"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"351"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"351"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"467"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"351"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"351"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"351"},"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/index.js",[],["482","483"],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/App.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/index.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/router.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/counter.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplatesReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplateListReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getNetworkTemplateListReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/updateSelectedServicesReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceMetadataReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getBuildIssuesReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceConfigOptionsReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getBuildHistoryListReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/updateSelectedFilterTagsReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getScriptTemplatesReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/buildStackReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/middlewares/asyncDispatchMiddleware.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/middlewares/promiseMiddleware.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/constants.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceTemplates.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceTemplateList.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getNetworkTemplateList.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/updateSelectedServices.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getBuildHistoryList.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/checkBuildIssues.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceMetadata.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getScript.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceConfigOptions.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/updateFilterTags.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/buildStack.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/notFound/index.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/Sidebar/index.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/mainBuild/index.jsx",["484"],"// import React, { Fragment, useState, useEffect } from 'react';\nimport React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport ServiceGridItem from '../../features/servicesGridItem';\nimport BuildSidebar from '../../features/BuildSidebar';\nimport { getServiceTemplateListAction } from '../../actions/getServiceTemplateList.action';\nimport { getServiceTemplatesAction } from '../../actions/getServiceTemplates.action';\nimport { getNetworkTemplateListAction } from '../../actions/getNetworkTemplateList.action';\nimport {\n  getBuildOptions,\n  setBuildOptions,\n  buildOptionsInit,\n  setServiceOptions,\n  setTemporaryBuildOptions,\n  getTemporaryBuildOptions,\n  setTemporaryServiceOptions,\n  setupTemporaryBuildOptions,\n  saveTemporaryBuildOptions\n} from '../../utils/buildOptionSync';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetServiceTemplatesList: () => dispatch(getServiceTemplateListAction()),\n    dispatchGetNetworkTemplatesList: () => dispatch(getNetworkTemplateListAction()),\n    dispatchGetServiceTemplates: () => dispatch(getServiceTemplatesAction())\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    serviceTemplateList: selector(state => state.serviceTemplateList),\n    networkTemplateList: selector(state => state.networkTemplateList),\n    serviceTemplates: selector(state => state.serviceTemplates)\n  };\n};\n\nconst Main = (props) => {\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const {\n    dispatchGetServiceTemplatesList,\n    dispatchGetNetworkTemplatesList,\n    dispatchGetServiceTemplates,\n    serviceTemplateList,\n    networkTemplateList,\n    serviceTemplates\n  } = props;\n  const buildOptions = getBuildOptions();\n\n  useEffect(() => {\n    dispatchGetServiceTemplatesList();\n    dispatchGetNetworkTemplatesList();\n    dispatchGetServiceTemplates();\n  }, []);\n\n  return (\n    <Fragment>\n      <div  style={{ width: '100%' }}>\n        <Box display=\"flex\" p={1}>\n          <Box p={1} flexGrow={1}>\n            <Grid\n              container\n              justify=\"center\"\n            >\n              {Array.isArray(serviceTemplateList.payload) && serviceTemplateList.payload.map((templateName) => {\n                return (\n                  <Grid item\n                    key={templateName}\n                    display=\"flex\"\n                  >\n                    <ServiceGridItem\n                      serviceName={templateName}\n                      buildOptions={buildOptions}\n                      setBuildOptions={setBuildOptions}\n                      setServiceOptions={setServiceOptions}\n                      getBuildOptions={getBuildOptions}\n                      buildOptionsInit={buildOptionsInit}\n                      setTemporaryBuildOptions={setTemporaryBuildOptions}\n                      getTemporaryBuildOptions={getTemporaryBuildOptions}\n                      setTemporaryServiceOptions={setTemporaryServiceOptions}\n                      setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n                      saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n                      networkTemplateList={networkTemplateList}\n                      serviceTemplates={serviceTemplates?.payload ?? {}}\n                    />\n                  </Grid>\n                );\n              })}\n          </Grid>\n          </Box>\n          <Box p={1}>\n            <BuildSidebar\n              serviceTemplateList={serviceTemplateList}\n              networkTemplateList={networkTemplateList}\n              serviceTemplates={serviceTemplates?.payload ?? {}}\n            />\n          </Box>\n        </Box>\n\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Main;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/buildHistory/index.jsx",["485"],"// import React, { Fragment, useState, useEffect } from 'react';\nimport React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Grid from '@material-ui/core/Grid';\nimport BuildHistoryGridItem from '../../features/buildHistoryGridItem'\nimport {\n  getBuildHistoryListAction\n} from '../../actions/getBuildHistoryList.action';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetBuildHistoryList: () => dispatch(getBuildHistoryListAction())\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    buildHistory: selector(state => state.buildHistory)\n  };\n};\n\nconst Main = (props) => {\n\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const { dispatchGetBuildHistoryList, buildHistory } = props;\n\n  useEffect(() => {\n    dispatchGetBuildHistoryList();\n  }, []);\n\n  return (\n    <Fragment>\n      <div className=\"MainPage\">\n        <Grid\n          container\n          spacing={4}\n          justify=\"center\"\n        >\n          {typeof buildHistory.payload !== 'undefined' && Object.keys(buildHistory.payload.buildsList).map((buildDetailsTime) => {\n            return (\n              <Grid item\n                key={buildDetailsTime}\n                display=\"flex\"\n              >\n                <BuildHistoryGridItem\n                  buildTime={buildDetailsTime}\n                  buildDetails={buildHistory.payload.buildsList[buildDetailsTime]}\n                />\n              </Grid>\n            );\n          })}\n        </Grid>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Main;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/scripts/index.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/help/index.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/builds.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/templates.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/configs.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/buildOptionSync.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/config.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/buildHistoryGridItem/index.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/servicesGridItem/index.jsx",["486"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ServiceConfigModal from '../serviceConfigModal';\nimport { useTheme } from '@material-ui/core/styles';\nimport {\n  getBuildIssuesAction\n} from '../../actions/checkBuildIssues.action';\nimport {\n  getServiceMetadataAction\n} from '../../actions/getServiceMetadata.action';\nimport {\n  getServiceConfigOptionsAction\n} from '../../actions/getServiceConfigOptions.action';\nimport {\n  addSelectedService,\n  removeSelectedService\n} from '../../actions/updateSelectedServices.action';\nimport styles from './services-grid-item.module.css';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetServiceMetadata: (serviceName) => dispatch(getServiceMetadataAction(serviceName)),\n    dispatchGetServiceConfigOptions: (serviceName) => dispatch(getServiceConfigOptionsAction(serviceName)),\n    dispatchGetBuildIssues: (selectedServices, serviceConfigurations) => dispatch(getBuildIssuesAction(selectedServices, serviceConfigurations)),\n    dispatchAddSelectedService: (serviceName) => dispatch(addSelectedService(serviceName)),\n    dispatchRemoveSelectedService: (serviceName) => dispatch(removeSelectedService(serviceName))\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    templateList: selector(state => state.templateList),\n    configServiceMetadata: selector(state => state.configServiceMetadata),\n    configServiceConfigOptions: selector(state => state.configServiceConfigOptions),\n    hideServiceTags: selector(state => state.hideServiceTags),\n    selectedServices: selector(state => state.selectedServices),\n    buildIssues: selector(state => state.buildIssues)\n  };\n};\n\nconst useStyles = makeStyles({\n  serviceCard: {\n    \"&:hover\": {\n      borderColor: ({ theme }) => theme.palette.text.primary\n    }\n  }\n});\n\nconst ServiceItem = (props) => {\n  const theme = useTheme();\n  const classes = useStyles({ props, theme });\n  // console.log('theme.palette', theme.palette)\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const {\n    serviceName,\n    networkTemplateList,\n    serviceTemplates,\n    dispatchGetServiceMetadata,\n    dispatchGetServiceConfigOptions,\n    dispatchAddSelectedService,\n    dispatchRemoveSelectedService,\n    dispatchGetBuildIssues,\n    configServiceMetadata,\n    configServiceConfigOptions,\n    selectedServices,\n    hideServiceTags,\n    buildIssues,\n    buildOptions,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions\n  } = props;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [serviceMetadata, setServiceMetadata] = useState({});\n  const [serviceMetadataError, setServiceMetadataError] = useState({});\n  useEffect(() => {\n    if (\n      typeof configServiceMetadata.services.completed[serviceName] === 'undefined'\n      && typeof configServiceMetadata.services.failed[serviceName] === 'undefined'\n      && !configServiceMetadata.services.pending.includes(serviceName)\n      && !isLoading\n    ) {\n      setIsLoading(true);\n      return void dispatchGetServiceMetadata(serviceName);\n    }\n\n    setIsLoading(false);\n\n    if (typeof configServiceMetadata.services.completed[serviceName] === 'object') {\n      setServiceMetadata(configServiceMetadata.services.completed[serviceName].payload);\n    } else if (!configServiceMetadata.services.pending.includes(serviceName)) {\n      setServiceMetadataError({\n        hasError: true\n      });\n    }\n  }, [\n    isLoading,\n    serviceName,\n    dispatchGetServiceMetadata,\n    configServiceMetadata.services.completed,\n    configServiceMetadata.services.pending,\n    configServiceMetadata.services.failed\n  ]);\n\n  const [serviceConfigOptions, setServiceConfigOptions] = useState({});\n  const [serviceConfigOptionsError, setServiceConfigOptionsError] = useState({});\n  useEffect(() => {\n    if (\n      typeof configServiceConfigOptions.services.completed[serviceName] === 'undefined'\n      && typeof configServiceConfigOptions.services.failed[serviceName] === 'undefined'\n      && !configServiceConfigOptions.services.pending.includes(serviceName)\n      && !isLoading\n    ) {\n      setIsLoading(true);\n      return void dispatchGetServiceConfigOptions(serviceName);\n    }\n\n    // setIsLoading(false);\n\n    if (typeof configServiceConfigOptions.services.completed[serviceName] === 'object') {\n      setServiceConfigOptions(configServiceConfigOptions.services.completed[serviceName].payload);\n    } else if (!configServiceConfigOptions.services.pending.includes(serviceName)) {\n      setServiceConfigOptionsError({\n        hasError: true\n      });\n    }\n  }, [\n    isLoading,\n    serviceName,\n    dispatchGetServiceConfigOptions,\n    configServiceConfigOptions.services.completed,\n    configServiceConfigOptions.services.pending,\n    configServiceConfigOptions.services.failed\n  ]);\n\n  const [updated, setIsUpdated] = useState(false);\n  useEffect(() => {\n    if (updated) {\n      dispatchGetBuildIssues(selectedServices.selectedServices, {});\n    }\n    setIsUpdated(false);\n  }, [\n    updated,\n    serviceName,\n    selectedServices.selectedServices,\n    dispatchGetBuildIssues\n  ]);\n\n  const [hasIssue, setHasIssue] = useState(false);\n  useEffect(() => {\n    if (!selectedServices.selectedServices.includes(serviceName)) {\n      return void setHasIssue(false);\n    }\n    const issueList = buildIssues?.payload?.issueList ?? {};\n    if (Array.isArray(issueList.services)) {\n      issueList.services.forEach((service) => {\n        if (service.name === serviceName) {\n          return void setHasIssue(true);\n        }\n      });\n    }\n  }, [buildIssues, selectedServices.selectedServices, serviceName]);\n\n  const handleBuildSelectChange = (evt) => {\n    setIsUpdated(true);\n    if (evt.target.checked) {\n      return dispatchAddSelectedService(serviceName);\n    }\n    return dispatchRemoveSelectedService(serviceName);\n  }\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const serviceComponent = () => {\n    return (\n      <Box\n        p={1}\n        m={1}\n        justifyContent=\"center\"\n      >\n        <ServiceConfigModal\n          isOpen={modalOpen}\n          handleClose={() => setModalOpen(false)}\n          serviceMetadata={serviceMetadata}\n          serviceConfigOptions={serviceConfigOptions}\n          serviceName={serviceName}\n          buildOptions={buildOptions}\n          setBuildOptions={setBuildOptions}\n          setServiceOptions={setServiceOptions}\n          getBuildOptions={getBuildOptions}\n          buildOptionsInit={buildOptionsInit}\n          setTemporaryBuildOptions={setTemporaryBuildOptions}\n          getTemporaryBuildOptions={getTemporaryBuildOptions}\n          setTemporaryServiceOptions={setTemporaryServiceOptions}\n          setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n          saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n          networkTemplateList={networkTemplateList}\n          serviceTemplates={serviceTemplates}\n        />\n        <Box display=\"flex\" p={1} justifyContent=\"center\" fontSize=\"2rem\">{serviceMetadata.displayName}</Box>\n        <Box display=\"flex\" p={1} justifyContent=\"center\">\n          {!serviceMetadata.iconUri\n          && (\n            <Tooltip title=\"Service icon not provided in config\">\n              <ErrorOutlineOutlinedIcon style={{ fontSize: '6rem' }} />\n            </Tooltip>\n          )}\n          {serviceMetadata.iconUri\n          && (\n            <Tooltip title={`${serviceMetadata.displayName} icon`}>\n              <div className={styles.serviceIconContainer}>\n                <img className={styles.serviceIcon} src={serviceMetadata.iconUri} alt={`${serviceMetadata.displayName} icon`} />\n              </div>\n            </Tooltip>\n          )}\n        </Box>\n        <Box display=\"flex\" p={1} m={1} justifyContent=\"center\">\n          <Button variant=\"contained\" onClick={() => setModalOpen(true)}>{serviceMetadata.displayName} Configuration</Button>\n        </Box>\n        <Box display=\"flex\" p={1} justifyContent=\"center\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={selectedServices.selectedServices.includes(serviceName)}\n                onChange={handleBuildSelectChange}\n                name={`chkBuild${serviceName}`}\n                color=\"primary\"\n              />\n            }\n            label={`Add ${serviceMetadata.displayName} to build`}\n          />\n        </Box>\n        <Box display=\"flex\" m={1} justifyContent=\"center\">\n          <Link\n            href=\"#\"\n            rel=\"noopener\"\n            target=\"_blank\"\n            className={styles.docsLink}\n            color=\"inherit\"\n          >\n            {serviceMetadata.displayName} Help and Docs\n          </Link>\n        </Box>\n      </Box>\n    )\n  };\n\n  const errorComponent = () => {\n    return (\n      <Fragment>\n        <div>Error loading: {serviceName}</div>\n        <div>Try refreshing, and ensuring the API server is running correctly.</div>\n      </Fragment>\n    )\n  };\n\n  const loadingComponent = () => {\n    return (\n      <Fragment>\n        Loading '{serviceName}' metadata...\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'6rem'} width={'80%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} >\n          <Skeleton variant=\"circle\" width={120} height={120} />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'3rem'} width={'70%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'4rem'} width={'90%'} variant=\"text\" />\n        </Box>\n      </Fragment>\n    )\n  };\n\n  const highlightClass = () => {\n    if (selectedServices.selectedServices.includes(serviceName)) {\n      if (hasIssue) {\n        return styles.serviceError;\n      } else {\n        return styles.selectedForBuild;\n      }\n    }\n\n    return '';\n  };\n\n  const tagIsHidden = (hiddenTags, serviceTags) => {\n    let hide = false;\n\n    hiddenTags.forEach((hiddenTag) => {\n      serviceTags.forEach((serviceTag) => {\n        if (hiddenTag === serviceTag) {\n          hide = true;\n        }\n      });\n    });\n\n    return hide;\n  }\n\n  if (!isLoading && tagIsHidden(hideServiceTags.hideServiceTags, serviceMetadata.serviceTypeTags)) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <Box\n        className={`${styles.serviceCard} ${classes.serviceCard} ${highlightClass()}`}\n        borderRadius=\"borderRadius\"\n        borderColor=\"primary.main\"\n        margin={1}\n        border={1}\n      >\n        {isLoading\n        && (loadingComponent())}\n        {!isLoading\n        && serviceMetadata.displayName\n        && (\n          serviceComponent()\n        )}\n        {!isLoading\n        && serviceMetadataError.hasError === true\n        && (\n          errorComponent()\n        )}\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default ServiceItem;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/BuildSidebar/index.jsx",["487","488"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\n// import Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\n// import ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\nimport styles from './build-sidebar.module.css';\nimport {\n  addTagToHideListAction,\n  removeTagFromHideListAction\n} from '../../actions/updateFilterTags.action';\nimport {\n  createAndBuildStackAction\n} from '../../actions/buildStack.action';\nimport {\n  getScriptFromTemplateAction\n} from '../../actions/getScript.action';\nimport {\n  downloadBuildFile\n} from '../../actions/downloadBuild.action';\nimport BuildCompletedModal from '../buildCompletedModal';\nimport { API_STATUS } from '../../constants'\n\n// const useStyles = makeStyles({\n//   serviceCard: {\n//     \"&:hover\": {\n//       borderColor: ({ theme }) => theme.palette.text.primary\n//     }\n//   }\n// });\n\nconst getUniqueTagsFromTemplates = ({ serviceTemplateListPayload, metadataList }) => {\n  const tagList = [];\n  if (Array.isArray(serviceTemplateListPayload)) {\n    serviceTemplateListPayload.forEach((service) => {\n      if (metadataList[service] && metadataList[service].payload && Array.isArray(metadataList[service].payload.serviceTypeTags)) {\n        metadataList[service].payload.serviceTypeTags.forEach((tag) => {\n          if (!tagList.includes(tag)) {\n            tagList.push(tag);\n          }\n        });\n      }\n    });\n  }\n  tagList.sort();\n  return tagList;\n};\n\nconst buildIssueListItem = (name, issueType, issueText) => {\n  return (\n    <Box><strong>{name} [{issueType}]</strong> - {issueText}</Box>\n  );\n};\n\nconst buildIssuesRender = (issues) => {\n  const unknownError = !(\n    issues.payload\n    && issues.payload.issueList\n    && Array.isArray(issues.payload.issueList.services)\n    && Array.isArray(issues.payload.issueList.networks)\n    && Array.isArray(issues.payload.issueList.other)\n  );\n\n  const noIssues = (\n    !unknownError\n    && issues.payload.issueList.services.length === 0\n    && issues.payload.issueList.networks.length === 0\n    && issues.payload.issueList.other.length === 0\n  );\n\n  return (\n    <Box className={styles.section}>\n      Build Issues:\n      <Box>\n        {issues.status === API_STATUS.SUCCESS\n        && (\n          <Fragment>\n            {Array.isArray(issues.payload.issueList.services)\n            && issues.payload.issueList.services.length > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Services:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.services.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {Array.isArray(issues.payload.issueList.networks)\n            && issues.payload.issueList.networks.length > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Networks:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.networks.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {Array.isArray(issues.payload.issueList.other)\n            && issues.payload.issueList.other.length > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Other Issues:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.other.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {noIssues\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  No build issues\n                </Box>\n              </Box>\n            )}\n            {!noIssues\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  You can still attempt to build when issues are reported.\n                </Box>\n              </Box>\n            )}\n            {unknownError\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  An unknown error occured retrieving build issues\n                </Box>\n              </Box>\n            )}\n          </Fragment>\n        )}\n        {issues.status === API_STATUS.PENDING\n        && (\n          <Fragment>Loading...</Fragment>\n        )}\n        {issues.status === API_STATUS.FAILURE\n        && (\n          <Fragment>Failed to get build issues from API</Fragment>\n        )}\n        {issues.status === API_STATUS.UNINIT\n        && (\n          <Fragment>No changes detected</Fragment>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nconst buildList = (selectedServices) => {\n  return (\n    <Box className={styles.section}>\n      Building Services:\n      <Box>\n        {selectedServices.join(', ')}\n      </Box>\n    </Box>\n  );\n};\n\nconst buildServices = (dispatchBuildStack) => {\n  return (\n    <Box className={styles.section}>\n      Build:\n      <Box>\n        <Button variant=\"contained\" onClick={dispatchBuildStack}>Build</Button>\n      </Box>\n    </Box>\n  );\n};\n\nconst Sidebar = (props) => {\n  // const theme = useTheme();\n  // const classes = useStyles({ props, theme });\n\n  const mapStateToProps = (selector) => {\n    return {\n      configServiceMetadata: selector(state => state.configServiceMetadata),\n      hideServiceTags: selector(state => state.hideServiceTags),\n      selectedServices: selector(state => state.selectedServices),\n      buildIssues: selector(state => state.buildIssues),\n      buildStack: selector(state => state.buildStack),\n      scriptTemplates: selector(state => state.scriptTemplates)\n    };\n  };\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      dispatchAddTagToHideList: (tag) => dispatch(addTagToHideListAction(tag)),\n      dispatchRemoveTagFromHideList: (tag) => dispatch(removeTagFromHideListAction(tag)),\n      dispatchBuildStack: (selectedServices, serviceConfigurations) => dispatch(createAndBuildStackAction(selectedServices, serviceConfigurations)),\n      dispatchGetScriptTemplates: ({ scriptName, options, linkRef }) => dispatch(getScriptFromTemplateAction({ scriptName, options, linkRef })),\n      dispatchDownloadBuildFile: ({ build, type, linkRef }) => dispatch(downloadBuildFile({ build, type, linkRef }))\n    };\n  };\n  \n  props = {\n    ...props,\n    ...mapStateToProps(useSelector),\n    ...mapDispatchToProps(useDispatch()),\n  };\n\n  const [modalOpen, setModalOpen] = useState(false);\n  useEffect(() => {\n    if (props.buildStack.status === API_STATUS.SUCCESS) {\n      setModalOpen(true);\n    }\n  }, [\n    props.buildStack\n  ]);\n\n  const {\n    serviceTemplateList,\n    configServiceMetadata,\n    selectedServices,\n    buildIssues,\n    hideServiceTags,\n    dispatchRemoveTagFromHideList,\n    dispatchAddTagToHideList,\n    dispatchBuildStack,\n    dispatchGetScriptTemplates,\n    dispatchDownloadBuildFile,\n    buildStack,\n    scriptTemplates\n  } = props;\n\n  const downloadLinkRef = React.useRef(null);\n\n  const handleBuildSelectChange = (evt, tagName) => {\n    if (evt.target.checked) {\n      return dispatchAddTagToHideList(tagName);\n    }\n    return dispatchRemoveTagFromHideList(tagName);\n  };\n\n  const serviceFilter = (serviceTemplateListPayload, servicesMetadata) => {\n    return (\n      <Box className={styles.section}>\n        Hide by tag:\n        <Box>\n          {\n            getUniqueTagsFromTemplates({ serviceTemplateListPayload, metadataList: servicesMetadata }).map((tag) => {\n              return (\n                <FormControlLabel\n                key={tag}\n                control={\n                  <Checkbox\n                    checked={hideServiceTags.hideServiceTags.indexOf(tag) > -1}\n                    onChange={(evt) => handleBuildSelectChange(evt, tag)}\n                    name=\"checkedB\"\n                    color=\"primary\"\n                  />\n                }\n                label={tag}\n              />\n              );\n            })\n          }\n        </Box>\n      </Box>\n    );\n  };\n  \n  return (\n    <Fragment>\n      <a ref={downloadLinkRef} />\n      <BuildCompletedModal\n        isOpen={modalOpen}\n        handleClose={() => setModalOpen(false)}\n        buildStack={buildStack}\n        scriptTemplates={scriptTemplates}\n        dispatchGetScriptTemplates={dispatchGetScriptTemplates}\n        dispatchDownloadBuildFile={dispatchDownloadBuildFile}\n        downloadLinkRef={downloadLinkRef}\n      />\n      <Box\n        py=\"2rem\"\n        border={1}\n        className={`${styles.sidebarWrapper}`}\n      >\n        {serviceFilter(serviceTemplateList.payload, configServiceMetadata.services.completed)}\n        <Divider />\n        {buildIssuesRender(buildIssues)}\n        <Divider />\n        {buildList(selectedServices.selectedServices)}\n        <Divider />\n        {buildServices(() => {\n          if (Array.isArray(selectedServices.selectedServices) && selectedServices.selectedServices.length > 0) {\n            dispatchBuildStack(selectedServices.selectedServices);\n          }\n        })}\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Sidebar;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/downloadBuild.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/buildCompletedModal/index.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceConfigModal/index.jsx",["489","490","491","492"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Grid from '@material-ui/core/Grid';\nimport Button from \"@material-ui/core/Button\";\nimport Box from '@material-ui/core/Box';\nimport getConfigComponents from '../../utils/configOptionLoader';\nimport {\n  deleteTemporaryBuildOptions,\n  saveTemporaryBuildOptions\n} from '../../utils/buildOptionSync';\n\nconst getModalStyle = () => {\n  const top = 10;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    maxHeight: '75%',\n    overflow: 'hidden',\n    overflowY: 'scroll',\n    transform: `translate(-50%, 0%)`,\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: '50%',\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst ServiceConfigModal = (props) => {\n  const {\n    isOpen,\n    handleClose,\n    serviceName,\n    networkTemplateList,\n    serviceMetadata,\n    serviceConfigOptions,\n    buildOptions,\n    serviceTemplates,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions\n  } = props;\n\n  const closeModal = (event) => {\n    deleteTemporaryBuildOptions();\n    if (typeof handleClose === 'function') {\n      handleClose(event);\n    }\n  }\n\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">{serviceMetadata ? serviceMetadata.displayName : ''} ({serviceName}) Configuration</h2>\n      <Fragment>\n        {getConfigComponents(serviceConfigOptions ?? []).map((ConfigComponent, index) => {\n          return (\n            <Box\n              key={index}\n              mt=\"2rem\"\n              mb=\"2rem\"\n              p={2}\n              borderRadius=\"borderRadius\"\n              border={1}\n              borderColor=\"grey.500\"\n            >\n              <ConfigComponent\n                networkTemplateList={networkTemplateList}\n                setBuildOptions={setBuildOptions}\n                setServiceOptions={setServiceOptions}\n                getBuildOptions={getBuildOptions}\n                buildOptionsInit={buildOptionsInit}\n                setTemporaryBuildOptions={setTemporaryBuildOptions}\n                getTemporaryBuildOptions={getTemporaryBuildOptions}\n                setTemporaryServiceOptions={setTemporaryServiceOptions}\n                setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n                saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n                serviceMetadata={serviceMetadata}\n                serviceName={serviceName}\n                serviceConfigOptions={serviceConfigOptions}\n                serviceTemplates={serviceTemplates}\n              />\n            </Box>\n          );\n        })}\n        <Box pt={\"1rem\"}>\n          <Grid container item xs={12} spacing={3} >\n            <Grid item xs={7} md={6}>\n              <Button variant=\"contained\" onClick={(evt) => { saveTemporaryBuildOptions(); closeModal(evt); }}>Save and Close</Button>\n            </Grid>\n            <Grid item xs={7} md={6}>\n              <Button variant=\"contained\" onClick={(evt) => { closeModal(evt); }}>Cancel and Close</Button>\n            </Grid>\n          </Grid>\n        </Box>\n      </Fragment>\n      <ServiceConfigModal />\n    </div>\n  );\n\n  return (\n    <Modal\n      open={isOpen || false}\n      onClose={closeModal}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      {body}\n    </Modal>\n  );\n};\n\nexport default ServiceConfigModal;","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/configOptionLoader.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/index.js",["493"],"import PortConfig from './general/portConfig';\nimport NetworkConfig from './general/networkConfig';\nimport Logging from './general/logging';\nimport Volumes from './general/volumesConfig';\n\nexport default {\n  PortConfig,\n  NetworkConfig,\n  Logging,\n  Volumes\n};\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/networkConfig.jsx",["494","495","496","497","498","499","500","501","502","503"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst NetworkConfig = (props) => {\n  const {\n    serviceConfigOptions,\n    serviceName,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    networkTemplateList,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [modifiedNetworkList, setModifiedNetworkList] = useState({});\n  useEffect(() => {\n    const defaultOnNetworks = { ...getBuildOptions()?.services?.[serviceName]?.networks ?? {} };\n    serviceTemplates[serviceName]?.networks?.forEach((networkName) => {\n      defaultOnNetworks[networkName] = true;\n    });\n    setModifiedNetworkList({\n      ...defaultOnNetworks\n    });\n  }, []);\n\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      networks: modifiedNetworkList\n    });\n  }, [\n    modifiedNetworkList\n  ]);\n\n  const onChangeCb = (networkName, event) => {\n    const networkSelected = event.target.checked;\n    setModifiedNetworkList({\n      ...modifiedNetworkList,\n      [networkName]: networkSelected\n    });\n    if (typeof(onChange) === 'function') {\n      onChange(networkName, networkName);\n    }\n  };\n\n  const defaultValue = (networkName) => {\n    return (serviceTemplates[serviceName]?.networks ?? []).includes(networkName);\n  };\n\n  return (\n    <Fragment>\n      IOTstack Networks:\n      <Grid container spacing={3} justify=\"space-between\">\n        {(networkTemplateList?.payload ?? []).map((networkName) => {\n          return (\n            <Grid\n              item\n              xs={12}\n              md={5}\n              lg={4}\n              xl={2}\n              key={networkName}\n            >\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={modifiedNetworkList?.[networkName] ?? defaultValue(networkName)}\n                    onChange={(evt) => onChangeCb(networkName, evt) }\n                    name={networkName}\n                    color=\"primary\"\n                  />\n                }\n                label={networkName}\n              />\n            </Grid>\n          );\n        }).filter((ele) => {\n          return ele !== null;\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default NetworkConfig;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/logging.jsx",["504","505","506","507","508","509","510","511","512","513"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\n\nconst PortConfig = (props) => {\n\n  const {\n    serviceConfigOptions,\n    serviceName,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [loggingEnabled, setLoggingEnabled] = useState(getBuildOptions()?.services?.[serviceName]?.loggingEnabled ?? true);\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      loggingEnabled\n    });\n  }, [\n    loggingEnabled\n  ]);\n\n  const onChangeCb = (event) => {\n    const newSetting = event.target.checked;\n    setLoggingEnabled(newSetting);\n    if (typeof(onChange) === 'function') {\n      onChange(newSetting);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Box>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={loggingEnabled}\n              onChange={(evt) => onChangeCb(evt) }\n              name={\"logging\"}\n              color=\"primary\"\n            />\n          }\n          label={`Enable Logging for ${serviceName}`}\n        />\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default PortConfig;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/portConfig.jsx",["514","515","516","517","518","519","520"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  getExternalPort,\n  replaceExternalPort,\n  getInternalPort\n} from '../../../utils/parsers';\n\nconst PortConfig = (props) => {\n\n  const {\n    serviceConfigOptions,\n    serviceName,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [portSettings, setPortSettings] = useState(getBuildOptions()?.services?.[serviceName]?.ports || {});\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      ports: portSettings\n    });\n  }, [\n    portSettings\n  ]);\n\n  const onChangeCb = (portKey, portLabelValue, event) => {\n    const newPort = event.target.value;\n    // const defaultTemplatePort = defaultValue(portKey, portKey);\n    setPortSettings({\n      ...portSettings,\n      [portKey]: replaceExternalPort((portSettings[portKey] || portKey), newPort)\n    });\n    if (typeof(onChange) === 'function') {\n      onChange(portKey, portLabelValue, newPort);\n    }\n  };\n\n  const defaultValue = (portValueKey, defaultValue) => {\n    const servicePorts = tempBuildOptions?.services?.[serviceName] ?? {};\n    return servicePorts?.ports?.[portValueKey] ?? defaultValue;\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={3}>\n        {serviceConfigOptions && Object.keys(serviceConfigOptions.labeledPorts).map((portValueKey) => {\n          const currentPortSetting = portSettings[portValueKey] || defaultValue(portValueKey, portValueKey);\n          if ((serviceTemplates[serviceName]?.ports?.[portValueKey] ?? []).indexOf(portValueKey)) { // Only show ports that exist in the YAML template\n            return (\n              <Grid\n                item\n                xs={12}\n                md={6}\n                lg={3}\n                key={serviceConfigOptions.labeledPorts[portValueKey]}\n              >\n                <TextField\n                  id={`portConfig_${serviceConfigOptions.labeledPorts[portValueKey]}`}\n                  label={`Port: ${serviceConfigOptions.labeledPorts[portValueKey]} (${getInternalPort(defaultValue(portValueKey, portValueKey))})`}\n                  onChange={(event) => { onChangeCb(portValueKey, serviceConfigOptions.labeledPorts[portValueKey], event) }}\n                  value={getExternalPort(currentPortSetting)}\n                />\n              </Grid>\n            );\n          }\n\n          return null;\n        }).filter((ele) => {\n          return ele !== null;\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default PortConfig;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/volumesConfig.jsx",["521","522","523","524","525","526","527","528","529","530","531","532","533"],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/parsers.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/index.js",[],["534","535"],"/home/slyke/repos/IOTstack/.internal/wui/src/App.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/index.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/router.jsx",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/counter.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplateListReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplatesReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getNetworkTemplateListReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getServiceMetadataReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getServiceConfigOptionsReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/updateSelectedServicesReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/updateSelectedFilterTagsReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getBuildIssuesReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/buildStackReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getBuildHistoryListReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getScriptTemplatesReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/middlewares/promiseMiddleware.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/middlewares/asyncDispatchMiddleware.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/constants.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/pages/notFound/index.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/features/Sidebar/index.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/getServiceTemplateList.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/getServiceTemplates.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/getNetworkTemplateList.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/getServiceConfigOptions.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/getServiceMetadata.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/updateSelectedServices.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/updateFilterTags.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/checkBuildIssues.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/getBuildHistoryList.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/buildStack.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/getScript.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/pages/mainBuild/index.jsx",["536","537"],"// import React, { Fragment, useState, useEffect } from 'react';\nimport React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport ServiceGridItem from '../../features/servicesGridItem';\nimport BuildSidebar from '../../features/BuildSidebar';\nimport { getServiceTemplateListAction } from '../../actions/getServiceTemplateList.action';\nimport { getServiceTemplatesAction } from '../../actions/getServiceTemplates.action';\nimport { getNetworkTemplateListAction } from '../../actions/getNetworkTemplateList.action';\nimport { getAllServicesConfigOptionsAction } from '../../actions/getAllServicesConfigOptions.action';\nimport { getAllServicesMetadataAction } from '../../actions/getAllServicesMetadata.action';\nimport {\n  getBuildOptions,\n  setBuildOptions,\n  buildOptionsInit,\n  setServiceOptions,\n  setTemporaryBuildOptions,\n  getTemporaryBuildOptions,\n  setTemporaryServiceOptions,\n  setupTemporaryBuildOptions,\n  saveTemporaryBuildOptions\n} from '../../utils/buildOptionSync';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetServiceTemplatesList: () => dispatch(getServiceTemplateListAction()),\n    dispatchGetServiceTemplatesList: () => dispatch(getServiceTemplateListAction()),\n    dispatchGetNetworkTemplatesList: () => dispatch(getNetworkTemplateListAction()),\n    dispatchGetServiceTemplates: () => dispatch(getServiceTemplatesAction()),\n    dispatchGetAllServicesMetadata: () => dispatch(getAllServicesMetadataAction()),\n    dispatchGetAllServicesConfigOptions: () => dispatch(getAllServicesConfigOptionsAction())\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    serviceTemplateList: selector(state => state.serviceTemplateList),\n    networkTemplateList: selector(state => state.networkTemplateList),\n    serviceTemplates: selector(state => state.serviceTemplates),\n    allServicesConfigOptionsReducer: selector(state => state.allServicesConfigOptionsReducer),\n    allServicesMetadataReducer: selector(state => state.allServicesMetadataReducer)\n  };\n};\n\nconst Main = (props) => {\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const {\n    dispatchGetServiceTemplatesList,\n    dispatchGetNetworkTemplatesList,\n    dispatchGetServiceTemplates,\n    dispatchGetAllServicesMetadata,\n    dispatchGetAllServicesConfigOptions,\n    allServicesConfigOptionsReducer,\n    allServicesMetadataReducer,\n    serviceTemplateList,\n    networkTemplateList,\n    serviceTemplates\n  } = props;\n  const buildOptions = getBuildOptions();\n\n  useEffect(() => {\n    dispatchGetServiceTemplatesList();\n    dispatchGetNetworkTemplatesList();\n    dispatchGetServiceTemplates();\n    dispatchGetAllServicesMetadata();\n    dispatchGetAllServicesConfigOptions();\n  }, []);\n\n  return (\n    <Fragment>\n      <div  style={{ width: '100%' }}>\n        <Box display=\"flex\" p={1}>\n          <Box p={1} flexGrow={1}>\n            <Grid\n              container\n              justify=\"center\"\n            >\n              {Array.isArray(serviceTemplateList.payload) && serviceTemplateList.payload.map((templateName) => {\n                return (\n                  <Grid item\n                    key={templateName}\n                    display=\"flex\"\n                  >\n                    <ServiceGridItem\n                      serviceName={templateName}\n                      allServicesConfigOptionsReducer={allServicesConfigOptionsReducer}\n                      allServicesMetadataReducer={allServicesMetadataReducer}\n                      buildOptions={buildOptions}\n                      setBuildOptions={setBuildOptions}\n                      setServiceOptions={setServiceOptions}\n                      getBuildOptions={getBuildOptions}\n                      buildOptionsInit={buildOptionsInit}\n                      setTemporaryBuildOptions={setTemporaryBuildOptions}\n                      getTemporaryBuildOptions={getTemporaryBuildOptions}\n                      setTemporaryServiceOptions={setTemporaryServiceOptions}\n                      setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n                      saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n                      networkTemplateList={networkTemplateList}\n                      serviceTemplates={serviceTemplates?.payload ?? {}}\n                    />\n                  </Grid>\n                );\n              })}\n          </Grid>\n          </Box>\n          <Box p={1}>\n            <BuildSidebar\n              serviceTemplateList={serviceTemplateList}\n              networkTemplateList={networkTemplateList}\n              serviceTemplates={serviceTemplates?.payload ?? {}}\n            />\n          </Box>\n        </Box>\n\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Main;\n","/home/slyke/repos/IOTstack/.internal/wui/src/pages/buildHistory/index.jsx",["538"],"/home/slyke/repos/IOTstack/.internal/wui/src/pages/scripts/index.jsx",[],"/home/slyke/repos/IOTstack/.internal/wui/src/pages/help/index.jsx",[],"/home/slyke/repos/IOTstack/.internal/wui/src/services/templates.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/services/configs.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/services/builds.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/utils/buildOptionSync.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/config.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/features/servicesGridItem/index.jsx",["539","540"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ServiceConfigModal from '../serviceConfigModal';\nimport { useTheme } from '@material-ui/core/styles';\nimport { API_STATUS } from '../../constants'\nimport {\n  getBuildIssuesAction\n} from '../../actions/checkBuildIssues.action';\nimport {\n  getServiceMetadataAction\n} from '../../actions/getServiceMetadata.action';\nimport {\n  getServiceConfigOptionsAction\n} from '../../actions/getServiceConfigOptions.action';\nimport {\n  addSelectedService,\n  removeSelectedService\n} from '../../actions/updateSelectedServices.action';\nimport styles from './services-grid-item.module.css';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetServiceMetadata: (serviceName) => dispatch(getServiceMetadataAction(serviceName)),\n    dispatchGetServiceConfigOptions: (serviceName) => dispatch(getServiceConfigOptionsAction(serviceName)),\n    dispatchGetBuildIssues: (selectedServices, serviceConfigurations) => dispatch(getBuildIssuesAction(selectedServices, serviceConfigurations)),\n    dispatchAddSelectedService: (serviceName) => dispatch(addSelectedService(serviceName)),\n    dispatchRemoveSelectedService: (serviceName) => dispatch(removeSelectedService(serviceName))\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    templateList: selector(state => state.templateList),\n    hideServiceTags: selector(state => state.hideServiceTags),\n    selectedServices: selector(state => state.selectedServices),\n    buildIssues: selector(state => state.buildIssues)\n  };\n};\n\nconst useStyles = makeStyles({\n  serviceCard: {\n    \"&:hover\": {\n      borderColor: ({ theme }) => theme.palette.text.primary\n    }\n  }\n});\n\nconst ServiceItem = (props) => {\n  const theme = useTheme();\n  const classes = useStyles({ props, theme });\n  // console.log('theme.palette', theme.palette)\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const {\n    serviceName,\n    networkTemplateList,\n    serviceTemplates,\n    dispatchAddSelectedService,\n    dispatchRemoveSelectedService,\n    dispatchGetBuildIssues,\n    selectedServices,\n    hideServiceTags,\n    buildIssues,\n    buildOptions,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions,\n    allServicesMetadataReducer,\n    allServicesConfigOptionsReducer\n  } = props;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [serviceMetadata, setServiceMetadata] = useState({});\n  const [serviceConfigOptions, setServiceConfigOptions] = useState({});\n  const [serviceLoadError, setServiceLoadError] = useState({});\n  useEffect(() => {\n    if (\n      allServicesMetadataReducer.status === API_STATUS.SUCCESS\n      && allServicesConfigOptionsReducer.status === API_STATUS.SUCCESS\n    ) {\n      if (\n        !(\n          (allServicesMetadataReducer?.payload?.[serviceName] ?? false)\n          && (allServicesConfigOptionsReducer?.payload?.[serviceName] ?? false)\n        )\n      ) {\n        setServiceLoadError(true);\n        setIsLoading(false);\n        return null;\n      }\n      setServiceMetadata(allServicesMetadataReducer?.payload?.[serviceName]);\n      setServiceConfigOptions(allServicesConfigOptionsReducer?.payload?.[serviceName]);\n      setIsLoading(false);\n      return null;\n    }\n\n    setIsLoading(false);\n\n    if (\n      allServicesMetadataReducer.status === API_STATUS.FAILURE\n      && allServicesConfigOptionsReducer.status === API_STATUS.FAILURE\n    ) {\n      setIsLoading(false);\n      setServiceLoadError(true);\n      return null;\n    }\n  }, [\n    allServicesMetadataReducer,\n    allServicesConfigOptionsReducer\n  ]);\n\n  const [updated, setIsUpdated] = useState(false);\n  useEffect(() => {\n    if (updated) {\n      dispatchGetBuildIssues(selectedServices.selectedServices, getBuildOptions());\n    }\n    setIsUpdated(false);\n  }, [\n    updated,\n    serviceName,\n    selectedServices.selectedServices,\n    dispatchGetBuildIssues\n  ]);\n\n  const [hasIssue, setHasIssue] = useState(false);\n  useEffect(() => {\n    if (!selectedServices.selectedServices.includes(serviceName)) {\n      return void setHasIssue(false);\n    }\n    const issueList = buildIssues?.payload?.issueList ?? {};\n    if (Array.isArray(issueList.services)) {\n      let issueFound = false;\n      issueList.services.forEach((service) => {\n        if (service.name === serviceName) {\n          issueFound = true;\n        }\n      });\n      \n      return void setHasIssue(issueFound);\n    }\n  }, [buildIssues, selectedServices.selectedServices, serviceName]);\n\n  const handleBuildSelectChange = (evt) => {\n    setIsUpdated(true);\n    if (evt.target.checked) {\n      return dispatchAddSelectedService(serviceName);\n    }\n    return dispatchRemoveSelectedService(serviceName);\n  }\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const serviceComponent = () => {\n    return (\n      <Box\n        p={1}\n        m={1}\n        justifyContent=\"center\"\n      >\n        <ServiceConfigModal\n          isOpen={modalOpen}\n          handleClose={() => setModalOpen(false)}\n          serviceMetadata={serviceMetadata}\n          serviceConfigOptions={serviceConfigOptions}\n          serviceName={serviceName}\n          buildOptions={buildOptions}\n          setBuildOptions={setBuildOptions}\n          setServiceOptions={setServiceOptions}\n          getBuildOptions={getBuildOptions}\n          buildOptionsInit={buildOptionsInit}\n          setTemporaryBuildOptions={setTemporaryBuildOptions}\n          getTemporaryBuildOptions={getTemporaryBuildOptions}\n          setTemporaryServiceOptions={setTemporaryServiceOptions}\n          setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n          saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n          networkTemplateList={networkTemplateList}\n          serviceTemplates={serviceTemplates}\n        />\n        <Box\n          display=\"flex\"\n          p={1}\n          justifyContent=\"center\"\n          className={`${styles.serviceName}`}\n        >\n          {serviceMetadata.displayName}\n        </Box>\n        <Box display=\"flex\" p={1} justifyContent=\"center\">\n          {!serviceMetadata.iconUri\n          && (\n            <Tooltip title=\"Service icon not provided in config\">\n              <ErrorOutlineOutlinedIcon style={{ fontSize: '6rem' }} />\n            </Tooltip>\n          )}\n          {serviceMetadata.iconUri\n          && (\n            <Tooltip title={`${serviceMetadata.displayName} icon`}>\n              <div className={styles.serviceIconContainer}>\n                <img className={styles.serviceIcon} src={serviceMetadata.iconUri} alt={`${serviceMetadata.displayName} icon`} />\n              </div>\n            </Tooltip>\n          )}\n        </Box>\n        <Box display=\"flex\" p={1} m={1} justifyContent=\"center\">\n          <Button\n            variant=\"contained\"\n            onClick={() => { setTemporaryBuildOptions(buildOptions); setModalOpen(true); }}\n            className={`${styles.configButton}`}\n          >\n            {serviceMetadata.displayName} Configuration\n          </Button>\n        </Box>\n        <Box display=\"flex\" p={1} justifyContent=\"center\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={selectedServices.selectedServices.includes(serviceName)}\n                onChange={handleBuildSelectChange}\n                name={`chkBuild${serviceName}`}\n                color=\"primary\"\n              />\n            }\n            label={`Add ${serviceMetadata.displayName} to build`}\n          />\n        </Box>\n        <Box display=\"flex\" m={1} justifyContent=\"center\">\n          <Link\n            href=\"#\"\n            rel=\"noopener\"\n            target=\"_blank\"\n            className={styles.docsLink}\n            color=\"inherit\"\n          >\n            {serviceMetadata.displayName} Help and Docs\n          </Link>\n        </Box>\n      </Box>\n    )\n  };\n\n  const errorComponent = () => {\n    return (\n      <Fragment>\n        <div>Error loading: {serviceName}</div>\n        <div>Try refreshing, and ensuring the API server is running correctly.</div>\n      </Fragment>\n    )\n  };\n\n  const loadingComponent = () => {\n    return (\n      <Fragment>\n        Loading '{serviceName}' metadata...\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'6rem'} width={'80%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} >\n          <Skeleton variant=\"circle\" width={120} height={120} />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'3rem'} width={'70%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'4rem'} width={'90%'} variant=\"text\" />\n        </Box>\n      </Fragment>\n    )\n  };\n\n  const highlightClass = () => {\n    if (selectedServices.selectedServices.includes(serviceName)) {\n      if (hasIssue) {\n        return styles.serviceError;\n      } else {\n        return styles.selectedForBuild;\n      }\n    }\n\n    return '';\n  };\n\n  const tagIsHidden = (hiddenTags, serviceTags) => {\n    let hide = false;\n\n    hiddenTags.forEach((hiddenTag) => {\n      serviceTags.forEach((serviceTag) => {\n        if (hiddenTag === serviceTag) {\n          hide = true;\n        }\n      });\n    });\n\n    return hide;\n  }\n\n  if (!isLoading && tagIsHidden(hideServiceTags.hideServiceTags, serviceMetadata.serviceTypeTags)) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <Box\n        className={`${styles.serviceCard} ${classes.serviceCard} ${highlightClass()}`}\n        borderRadius=\"borderRadius\"\n        borderColor=\"primary.main\"\n        margin={1}\n        border={1}\n      >\n        {isLoading\n        && (loadingComponent())}\n        {!isLoading\n        && serviceMetadata.displayName\n        && (\n          serviceComponent()\n        )}\n        {!isLoading\n        && serviceLoadError === true\n        && (\n          errorComponent()\n        )}\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default ServiceItem;\n","/home/slyke/repos/IOTstack/.internal/wui/src/features/buildHistoryGridItem/index.jsx",[],"/home/slyke/repos/IOTstack/.internal/wui/src/features/BuildSidebar/index.jsx",["541","542"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\n// import Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\n// import ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\nimport styles from './build-sidebar.module.css';\nimport {\n  addTagToHideListAction,\n  removeTagFromHideListAction\n} from '../../actions/updateFilterTags.action';\nimport {\n  createAndBuildStackAction\n} from '../../actions/buildStack.action';\nimport {\n  getScriptFromTemplateAction\n} from '../../actions/getScript.action';\nimport {\n  downloadBuildFile\n} from '../../actions/downloadBuild.action';\nimport BuildCompletedModal from '../buildCompletedModal';\nimport { API_STATUS } from '../../constants';\nimport { getBuildOptions } from '../../utils/buildOptionSync';\n\n// const useStyles = makeStyles({\n//   serviceCard: {\n//     \"&:hover\": {\n//       borderColor: ({ theme }) => theme.palette.text.primary\n//     }\n//   }\n// });\n\nconst getUniqueTagsFromTemplates = ({ serviceTemplateListPayload, metadataList }) => {\n  const tagList = [];\n  if (Array.isArray(serviceTemplateListPayload)) {\n    serviceTemplateListPayload.forEach((service) => {\n      if (Array.isArray(metadataList?.[service]?.serviceTypeTags ?? false)) {\n        metadataList[service].serviceTypeTags.forEach((tag) => {\n          if (!tagList.includes(tag)) {\n            tagList.push(tag);\n          }\n        });\n      }\n    });\n  }\n  tagList.sort();\n  return tagList;\n};\n\nconst buildIssueListItem = (name, issueType, issueText) => {\n  return (\n    <Box><strong>{name} [{issueType}]</strong> - {issueText}</Box>\n  );\n};\n\nconst buildIssuesRender = (issues) => {\n  const unknownError = !(\n    issues.payload\n    && issues.payload.issueList\n    && Array.isArray(issues.payload.issueList.services)\n    && Array.isArray(issues.payload.issueList.networks)\n    && Array.isArray(issues.payload.issueList.other)\n  );\n\n  const noIssues = (\n    !unknownError\n    && issues.payload.issueList.services.length === 0\n    && issues.payload.issueList.networks.length === 0\n    && issues.payload.issueList.other.length === 0\n  );\n\n  return (\n    <Box className={styles.section}>\n      Build Issues:\n      <Box>\n        {issues.status === API_STATUS.SUCCESS\n        && (\n          <Fragment>\n            {Array.isArray(issues?.payload?.issueList?.services)\n            && (issues?.payload?.issueList?.services?.length ?? 0) > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Services:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.services.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {Array.isArray(issues?.payload?.issueList?.networks)\n            && (issues?.payload?.issueList?.networks?.length ?? 0) > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Networks:\n                  <Box>\n                    <ul>\n                      {(issues?.payload?.issueList?.networks ?? []).map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {Array.isArray(issues?.payload?.issueList?.other)\n            && (issues?.payload?.issueList?.other?.length ?? 0) > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Other Issues:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.other.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {noIssues\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  No build issues\n                </Box>\n              </Box>\n            )}\n            {!noIssues\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  You can still attempt to build when issues are reported.\n                </Box>\n              </Box>\n            )}\n            {unknownError\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  An unknown error occured retrieving build issues\n                </Box>\n              </Box>\n            )}\n          </Fragment>\n        )}\n        {issues.status === API_STATUS.PENDING\n        && (\n          <Fragment>Loading...</Fragment>\n        )}\n        {issues.status === API_STATUS.FAILURE\n        && (\n          <Fragment>Failed to get build issues from API</Fragment>\n        )}\n        {issues.status === API_STATUS.UNINIT\n        && (\n          <Fragment>No changes detected</Fragment>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nconst buildList = (selectedServices) => {\n  return (\n    <Box className={styles.section}>\n      Building Services:\n      <Box>\n        {selectedServices.join(', ')}\n      </Box>\n    </Box>\n  );\n};\n\nconst buildServices = (dispatchBuildStack) => {\n  return (\n    <Box className={styles.section}>\n      Build:\n      <Box>\n        <Button variant=\"contained\" onClick={dispatchBuildStack}>Build</Button>\n      </Box>\n    </Box>\n  );\n};\n\nconst Sidebar = (props) => {\n  // const theme = useTheme();\n  // const classes = useStyles({ props, theme });\n\n  const mapStateToProps = (selector) => {\n    return {\n      configServiceMetadata: selector(state => state.configServiceMetadata),\n      hideServiceTags: selector(state => state.hideServiceTags),\n      selectedServices: selector(state => state.selectedServices),\n      buildIssues: selector(state => state.buildIssues),\n      buildStack: selector(state => state.buildStack),\n      scriptTemplates: selector(state => state.scriptTemplates),\n      allServicesMetadataReducer: selector(state => state.allServicesMetadataReducer)\n    };\n  };\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      dispatchAddTagToHideList: (tag) => dispatch(addTagToHideListAction(tag)),\n      dispatchRemoveTagFromHideList: (tag) => dispatch(removeTagFromHideListAction(tag)),\n      dispatchBuildStack: (selectedServices, serviceConfigurations) => dispatch(createAndBuildStackAction(selectedServices, serviceConfigurations)),\n      dispatchGetScriptTemplates: ({ scriptName, options, linkRef }) => dispatch(getScriptFromTemplateAction({ scriptName, options, linkRef })),\n      dispatchDownloadBuildFile: ({ build, type, linkRef }) => dispatch(downloadBuildFile({ build, type, linkRef }))\n    };\n  };\n  \n  props = {\n    ...props,\n    ...mapStateToProps(useSelector),\n    ...mapDispatchToProps(useDispatch()),\n  };\n\n  const [modalOpen, setModalOpen] = useState(false);\n  useEffect(() => {\n    if (props.buildStack.status === API_STATUS.SUCCESS) {\n      setModalOpen(true);\n    }\n  }, [\n    props.buildStack\n  ]);\n\n  const {\n    serviceTemplateList,\n    allServicesMetadataReducer,\n    selectedServices,\n    buildIssues,\n    hideServiceTags,\n    dispatchRemoveTagFromHideList,\n    dispatchAddTagToHideList,\n    dispatchBuildStack,\n    dispatchGetScriptTemplates,\n    dispatchDownloadBuildFile,\n    buildStack,\n    scriptTemplates\n  } = props;\n\n  const downloadLinkRef = React.useRef(null);\n\n  const handleBuildSelectChange = (evt, tagName) => {\n    if (evt.target.checked) {\n      return dispatchAddTagToHideList(tagName);\n    }\n    return dispatchRemoveTagFromHideList(tagName);\n  };\n\n  const serviceFilter = (serviceTemplateListPayload, servicesMetadata) => {\n    return (\n      <Box className={styles.section}>\n        Hide by tag:\n        <Box>\n          {\n            getUniqueTagsFromTemplates({ serviceTemplateListPayload, metadataList: servicesMetadata }).map((tag) => {\n              return (\n                <FormControlLabel\n                key={tag}\n                control={\n                  <Checkbox\n                    checked={hideServiceTags.hideServiceTags.indexOf(tag) > -1}\n                    onChange={(evt) => handleBuildSelectChange(evt, tag)}\n                    name=\"checkedB\"\n                    color=\"primary\"\n                  />\n                }\n                label={tag}\n              />\n              );\n            })\n          }\n        </Box>\n      </Box>\n    );\n  };\n  \n  return (\n    <Fragment>\n      <a ref={downloadLinkRef} />\n      <BuildCompletedModal\n        isOpen={modalOpen}\n        handleClose={() => setModalOpen(false)}\n        buildStack={buildStack}\n        scriptTemplates={scriptTemplates}\n        dispatchGetScriptTemplates={dispatchGetScriptTemplates}\n        dispatchDownloadBuildFile={dispatchDownloadBuildFile}\n        downloadLinkRef={downloadLinkRef}\n      />\n      <Box\n        py=\"2rem\"\n        border={1}\n        className={`${styles.sidebarWrapper}`}\n      >\n        {serviceFilter(serviceTemplateList.payload, allServicesMetadataReducer.payload)}\n        <Divider />\n        {buildIssuesRender(buildIssues)}\n        <Divider />\n        {buildList(selectedServices.selectedServices)}\n        <Divider />\n        {buildServices(() => {\n          if (Array.isArray(selectedServices.selectedServices) && selectedServices.selectedServices.length > 0) {\n            dispatchBuildStack(selectedServices.selectedServices, getBuildOptions());\n          }\n        })}\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Sidebar;\n","/home/slyke/repos/IOTstack/.internal/wui/src/actions/downloadBuild.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceConfigModal/index.jsx",["543","544","545"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Grid from '@material-ui/core/Grid';\nimport Button from \"@material-ui/core/Button\";\nimport Box from '@material-ui/core/Box';\nimport getConfigComponents from '../../utils/configOptionLoader';\nimport {\n  deleteTemporaryBuildOptions\n} from '../../utils/buildOptionSync';\n\nconst getModalStyle = () => {\n  const top = 10;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    maxHeight: '75%',\n    overflow: 'hidden',\n    overflowY: 'scroll',\n    transform: `translate(-50%, 0%)`,\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: '50%',\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst ServiceConfigModal = (props) => {\n  const {\n    isOpen,\n    handleClose,\n    serviceName,\n    networkTemplateList,\n    serviceMetadata,\n    serviceConfigOptions,\n    buildOptions,\n    serviceTemplates,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions\n  } = props;\n\n  const closeModal = (event) => {\n    deleteTemporaryBuildOptions();\n    if (typeof handleClose === 'function') {\n      handleClose(event);\n    }\n  }\n\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">{serviceMetadata ? serviceMetadata.displayName : ''} ({serviceName}) Configuration</h2>\n      <Fragment>\n        {getConfigComponents(serviceConfigOptions ?? []).map((ConfigComponent, index) => {\n          return (\n            <Box\n              key={index}\n              mt=\"2rem\"\n              mb=\"2rem\"\n              p={2}\n              borderRadius=\"borderRadius\"\n              border={1}\n              borderColor=\"grey.500\"\n            >\n              <ConfigComponent\n                networkTemplateList={networkTemplateList}\n                setBuildOptions={setBuildOptions}\n                setServiceOptions={setServiceOptions}\n                getBuildOptions={getBuildOptions}\n                buildOptionsInit={buildOptionsInit}\n                setTemporaryBuildOptions={setTemporaryBuildOptions}\n                getTemporaryBuildOptions={getTemporaryBuildOptions}\n                setTemporaryServiceOptions={setTemporaryServiceOptions}\n                setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n                saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n                serviceMetadata={serviceMetadata}\n                serviceName={serviceName}\n                serviceConfigOptions={serviceConfigOptions}\n                serviceTemplates={serviceTemplates}\n              />\n            </Box>\n          );\n        })}\n        <Box pt={\"1rem\"}>\n          <Grid container item xs={12} spacing={3} >\n            <Grid item xs={7} md={6}>\n              <Button variant=\"contained\" onClick={(evt) => { saveTemporaryBuildOptions(); closeModal(evt); }}>Save and Close</Button>\n            </Grid>\n            <Grid item xs={7} md={6}>\n              <Button variant=\"contained\" onClick={(evt) => { closeModal(evt); }}>Cancel and Close</Button>\n            </Grid>\n          </Grid>\n        </Box>\n      </Fragment>\n      <ServiceConfigModal />\n    </div>\n  );\n\n  return (\n    <Modal\n      open={isOpen || false}\n      onClose={closeModal}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      {body}\n    </Modal>\n  );\n};\n\nexport default ServiceConfigModal;","/home/slyke/repos/IOTstack/.internal/wui/src/features/buildCompletedModal/index.jsx",[],"/home/slyke/repos/IOTstack/.internal/wui/src/utils/configOptionLoader.jsx",[],"/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/index.js",["546"],"import PortConfig from './general/portConfig';\nimport NetworkConfig from './general/networkConfig';\nimport Logging from './general/logging';\nimport Volumes from './general/volumesConfig';\nimport Devices from './general/devicesConfig';\nimport Environment from './general/environmentConfig';\n\nexport default {\n  PortConfig,\n  NetworkConfig,\n  Logging,\n  Volumes,\n  Devices,\n  Environment\n};\n","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/portConfig.jsx",["547"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  getExternalPort,\n  replaceExternalPort,\n  getInternalPort\n} from '../../../utils/parsers';\n\nconst PortConfig = (props) => {\n\n  const {\n    serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [portSettings, setPortSettings] = useState(getBuildOptions()?.services?.[serviceName]?.ports || {});\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      ports: portSettings\n    });\n  }, [\n    portSettings\n  ]);\n\n  const onChangeCb = (portKey, portLabelValue, event) => {\n    const newPort = event.target.value;\n    // const defaultTemplatePort = defaultValue(portKey, portKey);\n    setPortSettings({\n      ...portSettings,\n      [portKey]: replaceExternalPort((portSettings[portKey] || portKey), newPort)\n    });\n    if (typeof(onChange) === 'function') {\n      onChange(portKey, portLabelValue, newPort);\n    }\n  };\n\n  const defaultValue = (portValueKey, defaultValue) => {\n    const servicePorts = tempBuildOptions?.services?.[serviceName] ?? {};\n    return servicePorts?.ports?.[portValueKey] ?? defaultValue;\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={3}>\n        {serviceConfigOptions && Object.keys(serviceConfigOptions.labeledPorts).map((portValueKey) => {\n          const currentPortSetting = portSettings[portValueKey] || defaultValue(portValueKey, portValueKey);\n          if ((serviceTemplates[serviceName]?.ports?.[portValueKey] ?? []).indexOf(portValueKey)) { // Only show ports that exist in the YAML template\n            return (\n              <Grid\n                item\n                xs={12}\n                md={6}\n                lg={3}\n                key={serviceConfigOptions.labeledPorts[portValueKey]}\n              >\n                <TextField\n                  id={`portConfig_${serviceConfigOptions.labeledPorts[portValueKey]}`}\n                  label={`Port: ${serviceConfigOptions.labeledPorts[portValueKey]} (${getInternalPort(defaultValue(portValueKey, portValueKey))})`}\n                  onChange={(event) => { onChangeCb(portValueKey, serviceConfigOptions.labeledPorts[portValueKey], event) }}\n                  value={getExternalPort(currentPortSetting)}\n                />\n              </Grid>\n            );\n          }\n\n          return null;\n        }).filter((ele) => {\n          return ele !== null;\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default PortConfig;\n","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/networkConfig.jsx",["548","549","550"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nconst NetworkConfig = (props) => {\n  const {\n    // serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    networkTemplateList,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  // const tempBuildOptions = getTemporaryBuildOptions();\n  const [networkMode, setNetworkMode] = useState({});\n\n  const [modifiedNetworkList, setModifiedNetworkList] = useState({});\n  useEffect(() => {\n    const defaultOnNetworks = { ...getBuildOptions()?.services?.[serviceName]?.networks ?? {} };\n    serviceTemplates[serviceName]?.networks?.forEach((networkName) => {\n      defaultOnNetworks[networkName] = true;\n    });\n    setModifiedNetworkList({\n      ...defaultOnNetworks\n    });\n\n    const templateNetworkMode = serviceTemplates?.[serviceName]?.['network-mode'];\n    const calculatedNetworkMode = Object.keys(defaultOnNetworks).length > 0 ? 'bridge' : 'host';\n\n    const toNetworkMode = getBuildOptions()?.services?.[serviceName]?.networkMode ?? templateNetworkMode ?? calculatedNetworkMode;\n    setNetworkMode(toNetworkMode);\n  }, []);\n\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      networks: modifiedNetworkList\n    });\n  }, [\n    modifiedNetworkList\n  ]);\n\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      networkMode: networkMode\n    });\n  }, [\n    networkMode\n  ]);\n\n  const onChangeCb = (event, changeType, networkName) => {\n    if (changeType === 'mode') {\n      const newMode = event.target.checked;\n      setNetworkMode(newMode);\n      if (typeof(onChange) === 'function') {\n        onChange(event, changeType);\n      }\n    } else if (changeType === 'network') {\n      const networkSelected = event.target.checked;\n      setModifiedNetworkList({\n        ...modifiedNetworkList,\n        [networkName]: networkSelected\n      });\n      if (typeof(onChange) === 'function') {\n        onChange(networkName, networkSelected, changeType);\n      }\n    } else {\n      \n      if (typeof(onChange) === 'function') {\n        onChange(event, changeType, networkName);\n      }\n    }\n  };\n\n  const defaultValue = (networkName) => {\n    return (serviceTemplates[serviceName]?.networks ?? []).includes(networkName);\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={3} justify=\"space-between\">\n        <Grid item>\n          IOTstack Networks:\n        </Grid>\n        <Grid item>\n          <Box m={-1} mr={1}>\n            <Box m={1} display=\"inline\">Mode:</Box>\n            <Select\n              labelId=\"network-mode-label\"\n              id=\"network-mode\"\n              value={networkMode}\n              onChange={(evt) => onChangeCb(evt, 'mode')}\n            >\n              <MenuItem value={'Unchanged'}>Unchanged</MenuItem>\n              <MenuItem value={'host'}>Host</MenuItem>\n              <MenuItem value={'bridge'}>Bridge</MenuItem>\n              <MenuItem value={'overlay'}>Overlay</MenuItem>\n              <MenuItem value={'macvlan'}>MAC-VLAN</MenuItem>\n              <MenuItem value={'none'}>No Networking</MenuItem>\n            </Select>\n          </Box>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3} justify=\"space-between\">\n        {(networkTemplateList?.payload ?? []).map((networkName) => {\n          return (\n            <Grid\n              item\n              xs={12}\n              md={5}\n              lg={4}\n              xl={2}\n              key={networkName}\n            >\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={modifiedNetworkList?.[networkName] ?? defaultValue(networkName)}\n                    onChange={(evt) => onChangeCb(evt, 'network', networkName) }\n                    name={networkName}\n                    color=\"primary\"\n                  />\n                }\n                label={networkName}\n              />\n            </Grid>\n          );\n        }).filter((ele) => {\n          return ele !== null;\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default NetworkConfig;\n","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/logging.jsx",["551"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\n\nconst PortConfig = (props) => {\n\n  const {\n    // serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    // serviceTemplates,\n    onChange\n  } = props;\n\n  // const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [loggingEnabled, setLoggingEnabled] = useState(getBuildOptions()?.services?.[serviceName]?.loggingEnabled ?? true);\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      loggingEnabled\n    });\n  }, [\n    loggingEnabled\n  ]);\n\n  const onChangeCb = (event) => {\n    const newSetting = event.target.checked;\n    setLoggingEnabled(newSetting);\n    if (typeof(onChange) === 'function') {\n      onChange(newSetting);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Box>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={loggingEnabled}\n              onChange={(evt) => onChangeCb(evt) }\n              name={\"logging\"}\n              color=\"primary\"\n            />\n          }\n          label={`Enable Logging for ${serviceName}`}\n        />\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default PortConfig;\n","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/volumesConfig.jsx",["552","553"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  getExternalVolume,\n  getInternalVolume,\n  replaceExternalVolume\n} from '../../../utils/parsers';\n\nconst VolumesConfig = (props) => {\n\n  const {\n    // serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n  const yamlVolumeSettings = serviceTemplates?.[serviceName]?.volumes || [];\n\n  const [volumeSettings, setVolumeSettings] = useState(yamlVolumeSettings);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    if ((getBuildOptions().services?.[serviceName]?.volumes?.length ?? 0) < 1 ) {\n      setTemporaryServiceOptions(serviceName, {\n        ...getBuildOptions().services?.[serviceName] ?? {},\n        volumes: yamlVolumeSettings\n      });\n    } else {\n      setVolumeSettings(getBuildOptions().services?.[serviceName]?.volumes);\n    }\n    setLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    if (loaded) {\n      setTemporaryServiceOptions(serviceName, {\n        ...tempBuildOptions?.services?.[serviceName] ?? {},\n        volumes: volumeSettings\n      });\n    }\n  }, [\n    volumeSettings\n  ]);\n\n  const onChangeCb = (internalVolume, event) => {\n    const newExternalVolumePath = event.target.value;\n    const temporaryVolumes = [...volumeSettings];\n    \n    const volumeIndex = temporaryVolumes.findIndex((index) => {\n      return getInternalVolume(index) === internalVolume;\n    });\n    \n    if (volumeIndex > -1) {\n      temporaryVolumes[volumeIndex] = replaceExternalVolume(temporaryVolumes[volumeIndex], newExternalVolumePath);\n    }\n\n    setVolumeSettings(temporaryVolumes);\n    if (typeof(onChange) === 'function') {\n      onChange(internalVolume, newExternalVolumePath);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={4}>\n        {volumeSettings.map((volume) => {\n          const internalVolume = getInternalVolume(volume);\n          const currentExternalVolume = getExternalVolume(volume);\n\n          return (\n            <Grid\n              item\n              xs={12}\n              md={12}\n              lg={6}\n              xl={5}\n              key={internalVolume}\n            >\n              <TextField\n                id={`volumeConfig_${internalVolume}`}\n                label={`Vol: ${internalVolume} ${currentExternalVolume === '' ? '(Deleted)' : ''}`}\n                onChange={(event) => { onChangeCb(internalVolume, event) }}\n                value={currentExternalVolume}\n                style={{ width: '100%' }}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default VolumesConfig;\n","/home/slyke/repos/IOTstack/.internal/wui/src/utils/parsers.js",[],["554","555"],"/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/environmentConfig.jsx",["556","557"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  getEnvironmentKey,\n  getEnvironmentValue\n} from '../../../utils/parsers';\n\nconst VolumesConfig = (props) => {\n\n  const {\n    serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n  const yamlEnvironmentSettings = serviceTemplates?.[serviceName]?.environment || [];\n\n  const [environmentSettings, setEnvironmentSettings] = useState(yamlEnvironmentSettings);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    // Check if there's a default value set in configs, and use it if so.\n    const envBuildDefaultOptions = serviceConfigOptions?.modifyableEnvironment ?? [];\n    const defaultEnvSettings = yamlEnvironmentSettings.map((envKV) => {\n      const envKey = getEnvironmentKey(envKV);\n      const defaultKV = envBuildDefaultOptions.find((modObj) => {\n        return modObj.key === envKey;\n      });\n\n      if (defaultKV) {\n        return `${envKey}=${defaultKV.value}`;\n      }\n      return envKV;\n    });\n\n    // Load options from persistant state\n    if ((getBuildOptions().services?.[serviceName]?.environment?.length ?? 0) < 1 ) {\n      setTemporaryServiceOptions(serviceName, {\n        ...getBuildOptions().services?.[serviceName] ?? {},\n        environment: defaultEnvSettings\n      });\n      setEnvironmentSettings(defaultEnvSettings);\n    } else {\n      setEnvironmentSettings(getBuildOptions().services?.[serviceName]?.environment);\n    }\n    setLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    if (loaded) {\n      setTemporaryServiceOptions(serviceName, {\n        ...tempBuildOptions?.services?.[serviceName] ?? {},\n        environment: environmentSettings\n      });\n    }\n  }, [\n    environmentSettings\n  ]);\n\n  const onChangeCb = (environmentKey, event) => {\n    const newEnvironmentValue = event.target.value;\n    const temporaryEnvironment = [...environmentSettings];\n    \n    const environmentIndex = temporaryEnvironment.findIndex((index) => {\n      return getEnvironmentKey(index) === environmentKey;\n    });\n    \n    if (environmentIndex > -1) {\n      temporaryEnvironment[environmentIndex] = `${environmentKey}=${newEnvironmentValue}`\n    }\n\n    setEnvironmentSettings(temporaryEnvironment);\n    if (typeof(onChange) === 'function') {\n      onChange(environmentKey, newEnvironmentValue);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={3}>\n        {environmentSettings.map((environmentKeyValue) => {\n          const environmentKey = getEnvironmentKey(environmentKeyValue);\n          const environmentValue = getEnvironmentValue(environmentKeyValue);\n\n          return (\n            <Grid\n              item\n              xs={12}\n              md={12}\n              lg={5}\n              xl={4}\n              key={environmentKey}\n            >\n              <TextField\n                id={`environmentConfig_${environmentKey}`}\n                label={`Env Var: ${environmentKey} ${environmentValue === '' ? '(Deleted)' : ''}`}\n                onChange={(event) => { onChangeCb(environmentKey, event) }}\n                value={environmentValue}\n                style={{ width: '100%' }}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default VolumesConfig;\n","/home/slyke/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/devicesConfig.jsx",["558","559"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nconst DevicessConfig = (props) => {\n\n  const {\n    // serviceConfigOptions,\n    serviceName,\n    // setBuildOptions,\n    getBuildOptions,\n    // buildOptionsInit,\n    // setServiceOptions,\n    // setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    // setupTemporaryBuildOptions,\n    // saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n  const yamlDevicesSettings = serviceTemplates?.[serviceName]?.devices || [];\n\n  const [devicesSettings, setDevicesSettings] = useState(yamlDevicesSettings);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    if ((getBuildOptions().services?.[serviceName]?.devices?.length ?? 0) < 1 ) {\n      setTemporaryServiceOptions(serviceName, {\n        ...getBuildOptions().services?.[serviceName] ?? {},\n        devices: yamlDevicesSettings\n      });\n    } else {\n      setDevicesSettings(getBuildOptions().services?.[serviceName]?.devices);\n    }\n    setLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    if (loaded) {\n      setTemporaryServiceOptions(serviceName, {\n        ...tempBuildOptions?.services?.[serviceName] ?? {},\n        devices: devicesSettings\n      });\n    }\n  }, [\n    devicesSettings\n  ]);\n\n  const onChangeCb = (oldDevice, event) => {\n    const newDevice = event.target.value;\n    const temporaryDevices = [...devicesSettings];\n    \n    const devicesIndex = temporaryDevices.findIndex((device) => {\n      return oldDevice === device;\n    });\n\n    if (devicesIndex > -1) {\n      temporaryDevices[devicesIndex] = newDevice;\n    }\n\n    setDevicesSettings(temporaryDevices);\n    if (typeof(onChange) === 'function') {\n      onChange(oldDevice, newDevice);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={3}>\n        {devicesSettings.map((device, index) => {\n\n          return (\n            <Grid\n              item\n              xs={12}\n              md={12}\n              lg={5}\n              xl={4}\n              key={index}\n            >\n              <TextField\n                id={`devicesConfig_${device}`}\n                label={`devices: ${device === '' ? '(Deleted)' : ''}`}\n                onChange={(event) => { onChangeCb(device, event) }}\n                value={device}\n                style={{ width: '100%' }}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default DevicessConfig;\n","/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getAllServicesMetadataReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/reducers/getAllServicesConfigOptionsReducer.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/getAllServicesMetadata.action.js",[],"/home/slyke/repos/IOTstack/.internal/wui/src/actions/getAllServicesConfigOptions.action.js",[],{"ruleId":"560","replacedBy":"561"},{"ruleId":"562","replacedBy":"563"},{"ruleId":"564","severity":1,"message":"565","line":60,"column":6,"nodeType":"566","endLine":60,"endColumn":8,"suggestions":"567"},{"ruleId":"564","severity":1,"message":"568","line":34,"column":6,"nodeType":"566","endLine":34,"endColumn":8,"suggestions":"569"},{"ruleId":"570","severity":1,"message":"571","line":127,"column":10,"nodeType":"572","messageId":"573","endLine":127,"endColumn":35},{"ruleId":"574","severity":1,"message":"575","line":300,"column":7,"nodeType":"576","endLine":300,"endColumn":34},{"ruleId":"577","severity":1,"message":"578","line":300,"column":7,"nodeType":"576","endLine":300,"endColumn":34},{"ruleId":"570","severity":1,"message":"579","line":1,"column":27,"nodeType":"572","messageId":"573","endLine":1,"endColumn":35},{"ruleId":"570","severity":1,"message":"580","line":1,"column":37,"nodeType":"572","messageId":"573","endLine":1,"endColumn":46},{"ruleId":"570","severity":1,"message":"581","line":10,"column":3,"nodeType":"572","messageId":"573","endLine":10,"endColumn":28},{"ruleId":"570","severity":1,"message":"582","line":46,"column":5,"nodeType":"572","messageId":"573","endLine":46,"endColumn":17},{"ruleId":"583","severity":1,"message":"584","line":6,"column":1,"nodeType":"585","endLine":11,"endColumn":3},{"ruleId":"570","severity":1,"message":"586","line":9,"column":5,"nodeType":"572","messageId":"573","endLine":9,"endColumn":25},{"ruleId":"570","severity":1,"message":"587","line":11,"column":5,"nodeType":"572","messageId":"573","endLine":11,"endColumn":20},{"ruleId":"570","severity":1,"message":"588","line":13,"column":5,"nodeType":"572","messageId":"573","endLine":13,"endColumn":21},{"ruleId":"570","severity":1,"message":"589","line":14,"column":5,"nodeType":"572","messageId":"573","endLine":14,"endColumn":22},{"ruleId":"570","severity":1,"message":"590","line":16,"column":5,"nodeType":"572","messageId":"573","endLine":16,"endColumn":29},{"ruleId":"570","severity":1,"message":"591","line":19,"column":5,"nodeType":"572","messageId":"573","endLine":19,"endColumn":31},{"ruleId":"570","severity":1,"message":"592","line":20,"column":5,"nodeType":"572","messageId":"573","endLine":20,"endColumn":30},{"ruleId":"570","severity":1,"message":"593","line":25,"column":9,"nodeType":"572","messageId":"573","endLine":25,"endColumn":25},{"ruleId":"564","severity":1,"message":"594","line":36,"column":6,"nodeType":"566","endLine":36,"endColumn":8,"suggestions":"595"},{"ruleId":"564","severity":1,"message":"596","line":43,"column":6,"nodeType":"566","endLine":45,"endColumn":4,"suggestions":"597"},{"ruleId":"570","severity":1,"message":"586","line":10,"column":5,"nodeType":"572","messageId":"573","endLine":10,"endColumn":25},{"ruleId":"570","severity":1,"message":"587","line":12,"column":5,"nodeType":"572","messageId":"573","endLine":12,"endColumn":20},{"ruleId":"570","severity":1,"message":"588","line":14,"column":5,"nodeType":"572","messageId":"573","endLine":14,"endColumn":21},{"ruleId":"570","severity":1,"message":"589","line":15,"column":5,"nodeType":"572","messageId":"573","endLine":15,"endColumn":22},{"ruleId":"570","severity":1,"message":"590","line":16,"column":5,"nodeType":"572","messageId":"573","endLine":16,"endColumn":29},{"ruleId":"570","severity":1,"message":"591","line":19,"column":5,"nodeType":"572","messageId":"573","endLine":19,"endColumn":31},{"ruleId":"570","severity":1,"message":"592","line":20,"column":5,"nodeType":"572","messageId":"573","endLine":20,"endColumn":30},{"ruleId":"570","severity":1,"message":"598","line":21,"column":5,"nodeType":"572","messageId":"573","endLine":21,"endColumn":21},{"ruleId":"570","severity":1,"message":"593","line":25,"column":9,"nodeType":"572","messageId":"573","endLine":25,"endColumn":25},{"ruleId":"564","severity":1,"message":"596","line":33,"column":6,"nodeType":"566","endLine":35,"endColumn":4,"suggestions":"599"},{"ruleId":"570","severity":1,"message":"587","line":16,"column":5,"nodeType":"572","messageId":"573","endLine":16,"endColumn":20},{"ruleId":"570","severity":1,"message":"588","line":18,"column":5,"nodeType":"572","messageId":"573","endLine":18,"endColumn":21},{"ruleId":"570","severity":1,"message":"589","line":19,"column":5,"nodeType":"572","messageId":"573","endLine":19,"endColumn":22},{"ruleId":"570","severity":1,"message":"590","line":20,"column":5,"nodeType":"572","messageId":"573","endLine":20,"endColumn":29},{"ruleId":"570","severity":1,"message":"591","line":23,"column":5,"nodeType":"572","messageId":"573","endLine":23,"endColumn":31},{"ruleId":"570","severity":1,"message":"592","line":24,"column":5,"nodeType":"572","messageId":"573","endLine":24,"endColumn":30},{"ruleId":"564","severity":1,"message":"596","line":37,"column":6,"nodeType":"566","endLine":39,"endColumn":4,"suggestions":"600"},{"ruleId":"570","severity":1,"message":"586","line":14,"column":5,"nodeType":"572","messageId":"573","endLine":14,"endColumn":25},{"ruleId":"570","severity":1,"message":"587","line":16,"column":5,"nodeType":"572","messageId":"573","endLine":16,"endColumn":20},{"ruleId":"570","severity":1,"message":"588","line":18,"column":5,"nodeType":"572","messageId":"573","endLine":18,"endColumn":21},{"ruleId":"570","severity":1,"message":"589","line":19,"column":5,"nodeType":"572","messageId":"573","endLine":19,"endColumn":22},{"ruleId":"570","severity":1,"message":"590","line":20,"column":5,"nodeType":"572","messageId":"573","endLine":20,"endColumn":29},{"ruleId":"570","severity":1,"message":"601","line":22,"column":5,"nodeType":"572","messageId":"573","endLine":22,"endColumn":31},{"ruleId":"570","severity":1,"message":"591","line":23,"column":5,"nodeType":"572","messageId":"573","endLine":23,"endColumn":31},{"ruleId":"570","severity":1,"message":"592","line":24,"column":5,"nodeType":"572","messageId":"573","endLine":24,"endColumn":30},{"ruleId":"570","severity":1,"message":"598","line":25,"column":5,"nodeType":"572","messageId":"573","endLine":25,"endColumn":21},{"ruleId":"570","severity":1,"message":"602","line":26,"column":5,"nodeType":"572","messageId":"573","endLine":26,"endColumn":13},{"ruleId":"570","severity":1,"message":"593","line":29,"column":9,"nodeType":"572","messageId":"573","endLine":29,"endColumn":25},{"ruleId":"570","severity":1,"message":"603","line":32,"column":10,"nodeType":"572","messageId":"573","endLine":32,"endColumn":24},{"ruleId":"570","severity":1,"message":"604","line":32,"column":26,"nodeType":"572","messageId":"573","endLine":32,"endColumn":43},{"ruleId":"560","replacedBy":"605"},{"ruleId":"562","replacedBy":"606"},{"ruleId":"607","severity":1,"message":"608","line":28,"column":5,"nodeType":"609","messageId":"610","endLine":28,"endColumn":36},{"ruleId":"564","severity":1,"message":"611","line":73,"column":6,"nodeType":"566","endLine":73,"endColumn":8,"suggestions":"612"},{"ruleId":"564","severity":1,"message":"568","line":34,"column":6,"nodeType":"566","endLine":34,"endColumn":8,"suggestions":"613"},{"ruleId":"564","severity":1,"message":"614","line":126,"column":6,"nodeType":"566","endLine":129,"endColumn":4,"suggestions":"615"},{"ruleId":"564","severity":1,"message":"616","line":137,"column":6,"nodeType":"566","endLine":142,"endColumn":4,"suggestions":"617"},{"ruleId":"574","severity":1,"message":"575","line":302,"column":7,"nodeType":"576","endLine":302,"endColumn":34},{"ruleId":"577","severity":1,"message":"578","line":302,"column":7,"nodeType":"576","endLine":302,"endColumn":34},{"ruleId":"570","severity":1,"message":"579","line":1,"column":27,"nodeType":"572","messageId":"573","endLine":1,"endColumn":35},{"ruleId":"570","severity":1,"message":"580","line":1,"column":37,"nodeType":"572","messageId":"573","endLine":1,"endColumn":46},{"ruleId":"570","severity":1,"message":"582","line":45,"column":5,"nodeType":"572","messageId":"573","endLine":45,"endColumn":17},{"ruleId":"583","severity":1,"message":"584","line":8,"column":1,"nodeType":"585","endLine":15,"endColumn":3},{"ruleId":"564","severity":1,"message":"596","line":37,"column":6,"nodeType":"566","endLine":39,"endColumn":4,"suggestions":"618"},{"ruleId":"564","severity":1,"message":"594","line":46,"column":6,"nodeType":"566","endLine":46,"endColumn":8,"suggestions":"619"},{"ruleId":"564","severity":1,"message":"596","line":53,"column":6,"nodeType":"566","endLine":55,"endColumn":4,"suggestions":"620"},{"ruleId":"564","severity":1,"message":"596","line":62,"column":6,"nodeType":"566","endLine":64,"endColumn":4,"suggestions":"621"},{"ruleId":"564","severity":1,"message":"596","line":33,"column":6,"nodeType":"566","endLine":35,"endColumn":4,"suggestions":"622"},{"ruleId":"564","severity":1,"message":"623","line":44,"column":6,"nodeType":"566","endLine":44,"endColumn":8,"suggestions":"624"},{"ruleId":"564","severity":1,"message":"625","line":53,"column":6,"nodeType":"566","endLine":55,"endColumn":4,"suggestions":"626"},{"ruleId":"560","replacedBy":"627"},{"ruleId":"562","replacedBy":"628"},{"ruleId":"564","severity":1,"message":"629","line":59,"column":6,"nodeType":"566","endLine":59,"endColumn":8,"suggestions":"630"},{"ruleId":"564","severity":1,"message":"625","line":68,"column":6,"nodeType":"566","endLine":70,"endColumn":4,"suggestions":"631"},{"ruleId":"564","severity":1,"message":"632","line":39,"column":6,"nodeType":"566","endLine":39,"endColumn":8,"suggestions":"633"},{"ruleId":"564","severity":1,"message":"625","line":48,"column":6,"nodeType":"566","endLine":50,"endColumn":4,"suggestions":"634"},"no-native-reassign",["635"],"no-negated-in-lhs",["636"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatchGetNetworkTemplatesList', 'dispatchGetServiceTemplates', and 'dispatchGetServiceTemplatesList'. Either include them or remove the dependency array.","ArrayExpression",["637"],"React Hook useEffect has a missing dependency: 'dispatchGetBuildHistoryList'. Either include it or remove the dependency array.",["638"],"no-unused-vars","'serviceConfigOptionsError' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","'useEffect' is defined but never used.","'saveTemporaryBuildOptions' is defined but never used.","'buildOptions' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'serviceConfigOptions' is assigned a value but never used.","'setBuildOptions' is assigned a value but never used.","'buildOptionsInit' is assigned a value but never used.","'setServiceOptions' is assigned a value but never used.","'setTemporaryBuildOptions' is assigned a value but never used.","'setupTemporaryBuildOptions' is assigned a value but never used.","'saveTemporaryBuildOptions' is assigned a value but never used.","'tempBuildOptions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getBuildOptions', 'serviceName', and 'serviceTemplates'. Either include them or remove the dependency array.",["639"],"React Hook useEffect has missing dependencies: 'getTemporaryBuildOptions', 'serviceName', and 'setTemporaryServiceOptions'. Either include them or remove the dependency array.",["640"],"'serviceTemplates' is assigned a value but never used.",["641"],["642"],"'setTemporaryServiceOptions' is assigned a value but never used.","'onChange' is assigned a value but never used.","'volumeSettings' is assigned a value but never used.","'setVolumeSettings' is assigned a value but never used.",["635"],["636"],"no-dupe-keys","Duplicate key 'dispatchGetServiceTemplatesList'.","ObjectExpression","unexpected","React Hook useEffect has missing dependencies: 'dispatchGetAllServicesConfigOptions', 'dispatchGetAllServicesMetadata', 'dispatchGetNetworkTemplatesList', 'dispatchGetServiceTemplates', and 'dispatchGetServiceTemplatesList'. Either include them or remove the dependency array.",["643"],["644"],"React Hook useEffect has a missing dependency: 'serviceName'. Either include it or remove the dependency array.",["645"],"React Hook useEffect has a missing dependency: 'getBuildOptions'. Either include it or remove the dependency array.",["646"],["647"],["648"],["649"],["650"],["651"],"React Hook useEffect has missing dependencies: 'getBuildOptions', 'serviceName', 'setTemporaryServiceOptions', and 'yamlVolumeSettings'. Either include them or remove the dependency array.",["652"],"React Hook useEffect has missing dependencies: 'loaded', 'serviceName', 'setTemporaryServiceOptions', and 'tempBuildOptions?.services'. Either include them or remove the dependency array.",["653"],["635"],["636"],"React Hook useEffect has missing dependencies: 'getBuildOptions', 'serviceConfigOptions?.modifyableEnvironment', 'serviceName', 'setTemporaryServiceOptions', and 'yamlEnvironmentSettings'. Either include them or remove the dependency array.",["654"],["655"],"React Hook useEffect has missing dependencies: 'getBuildOptions', 'serviceName', 'setTemporaryServiceOptions', and 'yamlDevicesSettings'. Either include them or remove the dependency array.",["656"],["657"],"no-global-assign","no-unsafe-negation",{"desc":"658","fix":"659"},{"desc":"660","fix":"661"},{"desc":"662","fix":"663"},{"desc":"664","fix":"665"},{"desc":"666","fix":"667"},{"desc":"668","fix":"669"},{"desc":"670","fix":"671"},{"desc":"660","fix":"672"},{"desc":"673","fix":"674"},{"desc":"675","fix":"676"},{"desc":"668","fix":"677"},{"desc":"662","fix":"678"},{"desc":"664","fix":"679"},{"desc":"680","fix":"681"},{"desc":"666","fix":"682"},{"desc":"683","fix":"684"},{"desc":"685","fix":"686"},{"desc":"687","fix":"688"},{"desc":"689","fix":"690"},{"desc":"691","fix":"692"},{"desc":"693","fix":"694"},"Update the dependencies array to be: [dispatchGetNetworkTemplatesList, dispatchGetServiceTemplates, dispatchGetServiceTemplatesList]",{"range":"695","text":"696"},"Update the dependencies array to be: [dispatchGetBuildHistoryList]",{"range":"697","text":"698"},"Update the dependencies array to be: [getBuildOptions, serviceName, serviceTemplates]",{"range":"699","text":"700"},"Update the dependencies array to be: [getTemporaryBuildOptions, modifiedNetworkList, serviceName, setTemporaryServiceOptions]",{"range":"701","text":"702"},"Update the dependencies array to be: [getTemporaryBuildOptions, loggingEnabled, serviceName, setTemporaryServiceOptions]",{"range":"703","text":"704"},"Update the dependencies array to be: [getTemporaryBuildOptions, portSettings, serviceName, setTemporaryServiceOptions]",{"range":"705","text":"706"},"Update the dependencies array to be: [dispatchGetAllServicesConfigOptions, dispatchGetAllServicesMetadata, dispatchGetNetworkTemplatesList, dispatchGetServiceTemplates, dispatchGetServiceTemplatesList]",{"range":"707","text":"708"},{"range":"709","text":"698"},"Update the dependencies array to be: [allServicesMetadataReducer, allServicesConfigOptionsReducer, serviceName]",{"range":"710","text":"711"},"Update the dependencies array to be: [updated, serviceName, selectedServices.selectedServices, dispatchGetBuildIssues, getBuildOptions]",{"range":"712","text":"713"},{"range":"714","text":"706"},{"range":"715","text":"700"},{"range":"716","text":"702"},"Update the dependencies array to be: [getTemporaryBuildOptions, networkMode, serviceName, setTemporaryServiceOptions]",{"range":"717","text":"718"},{"range":"719","text":"704"},"Update the dependencies array to be: [getBuildOptions, serviceName, setTemporaryServiceOptions, yamlVolumeSettings]",{"range":"720","text":"721"},"Update the dependencies array to be: [loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services, volumeSettings]",{"range":"722","text":"723"},"Update the dependencies array to be: [getBuildOptions, serviceConfigOptions?.modifyableEnvironment, serviceName, setTemporaryServiceOptions, yamlEnvironmentSettings]",{"range":"724","text":"725"},"Update the dependencies array to be: [environmentSettings, loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services]",{"range":"726","text":"727"},"Update the dependencies array to be: [getBuildOptions, serviceName, setTemporaryServiceOptions, yamlDevicesSettings]",{"range":"728","text":"729"},"Update the dependencies array to be: [devicesSettings, loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services]",{"range":"730","text":"731"},[2011,2013],"[dispatchGetNetworkTemplatesList, dispatchGetServiceTemplates, dispatchGetServiceTemplatesList]",[893,895],"[dispatchGetBuildHistoryList]",[1109,1111],"[getBuildOptions, serviceName, serviceTemplates]",[1298,1327],"[getTemporaryBuildOptions, modifiedNetworkList, serviceName, setTemporaryServiceOptions]",[991,1015],"[getTemporaryBuildOptions, loggingEnabled, serviceName, setTemporaryServiceOptions]",[1020,1042],"[getTemporaryBuildOptions, portSettings, serviceName, setTemporaryServiceOptions]",[2875,2877],"[dispatchGetAllServicesConfigOptions, dispatchGetAllServicesMetadata, dispatchGetNetworkTemplatesList, dispatchGetServiceTemplates, dispatchGetServiceTemplatesList]",[893,895],[4258,4331],"[allServicesMetadataReducer, allServicesConfigOptionsReducer, serviceName]",[4545,4646],"[updated, serviceName, selectedServices.selectedServices, dispatchGetBuildIssues, getBuildOptions]",[1038,1060],[1674,1676],[1863,1892],[2074,2095],"[getTemporaryBuildOptions, networkMode, serviceName, setTemporaryServiceOptions]",[1018,1042],[1346,1348],"[getBuildOptions, serviceName, setTemporaryServiceOptions, yamlVolumeSettings]",[1551,1575],"[loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services, volumeSettings]",[1954,1956],"[getBuildOptions, serviceConfigOptions?.modifyableEnvironment, serviceName, setTemporaryServiceOptions, yamlEnvironmentSettings]",[2168,2197],"[environmentSettings, loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services]",[1245,1247],"[getBuildOptions, serviceName, setTemporaryServiceOptions, yamlDevicesSettings]",[1451,1476],"[devicesSettings, loaded, serviceName, setTemporaryServiceOptions, tempBuildOptions?.services]"]