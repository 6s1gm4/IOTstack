[{"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/index.js":"1","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/App.js":"2","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/index.js":"3","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/router.jsx":"4","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/counter.js":"5","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplatesReducer.js":"6","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplateListReducer.js":"7","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getNetworkTemplateListReducer.js":"8","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/updateSelectedServicesReducer.js":"9","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceMetadataReducer.js":"10","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getBuildIssuesReducer.js":"11","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceConfigOptionsReducer.js":"12","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getBuildHistoryListReducer.js":"13","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/updateSelectedFilterTagsReducer.js":"14","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getScriptTemplatesReducer.js":"15","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/buildStackReducer.js":"16","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/middlewares/asyncDispatchMiddleware.js":"17","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/middlewares/promiseMiddleware.js":"18","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/constants.js":"19","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceTemplates.action.js":"20","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceTemplateList.action.js":"21","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getNetworkTemplateList.action.js":"22","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/updateSelectedServices.action.js":"23","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getBuildHistoryList.action.js":"24","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/checkBuildIssues.action.js":"25","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceMetadata.action.js":"26","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getScript.action.js":"27","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceConfigOptions.action.js":"28","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/updateFilterTags.action.js":"29","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/buildStack.action.js":"30","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/notFound/index.js":"31","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/Sidebar/index.js":"32","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/mainBuild/index.jsx":"33","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/buildHistory/index.jsx":"34","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/scripts/index.jsx":"35","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/help/index.jsx":"36","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/builds.js":"37","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/templates.js":"38","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/configs.js":"39","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/buildOptionSync.js":"40","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/config.js":"41","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/buildHistoryGridItem/index.jsx":"42","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/servicesGridItem/index.jsx":"43","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/BuildSidebar/index.jsx":"44","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/downloadBuild.action.js":"45","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/buildCompletedModal/index.jsx":"46","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceConfigModal/index.jsx":"47","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/configOptionLoader.jsx":"48","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/index.js":"49","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/networkConfig.jsx":"50","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/logging.jsx":"51","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/portConfig.jsx":"52","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/volumesConfig.jsx":"53","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/parsers.js":"54"},{"size":353,"mtime":1606908594887,"results":"55","hashOfConfig":"56"},{"size":789,"mtime":1607430281547,"results":"57","hashOfConfig":"56"},{"size":1612,"mtime":1610356071552,"results":"58","hashOfConfig":"56"},{"size":1231,"mtime":1610350276543,"results":"59","hashOfConfig":"56"},{"size":1551,"mtime":1606908622214,"results":"60","hashOfConfig":"56"},{"size":962,"mtime":1610356100446,"results":"61","hashOfConfig":"56"},{"size":972,"mtime":1610350671817,"results":"62","hashOfConfig":"56"},{"size":972,"mtime":1610352205750,"results":"63","hashOfConfig":"56"},{"size":1105,"mtime":1607294167538,"results":"64","hashOfConfig":"56"},{"size":1878,"mtime":1607294201436,"results":"65","hashOfConfig":"56"},{"size":894,"mtime":1607816383799,"results":"66","hashOfConfig":"56"},{"size":1922,"mtime":1609913154250,"results":"67","hashOfConfig":"56"},{"size":947,"mtime":1607430599186,"results":"68","hashOfConfig":"56"},{"size":1079,"mtime":1607529487594,"results":"69","hashOfConfig":"56"},{"size":1714,"mtime":1608802587649,"results":"70","hashOfConfig":"56"},{"size":902,"mtime":1608450868778,"results":"71","hashOfConfig":"56"},{"size":607,"mtime":1607109560543,"results":"72","hashOfConfig":"56"},{"size":711,"mtime":1607260096944,"results":"73","hashOfConfig":"56"},{"size":160,"mtime":1607109631094,"results":"74","hashOfConfig":"56"},{"size":340,"mtime":1610354130554,"results":"75","hashOfConfig":"56"},{"size":369,"mtime":1610350419464,"results":"76","hashOfConfig":"56"},{"size":369,"mtime":1610351960667,"results":"77","hashOfConfig":"56"},{"size":534,"mtime":1607292532075,"results":"78","hashOfConfig":"56"},{"size":340,"mtime":1607430711272,"results":"79","hashOfConfig":"56"},{"size":358,"mtime":1607816378529,"results":"80","hashOfConfig":"56"},{"size":375,"mtime":1607260125923,"results":"81","hashOfConfig":"56"},{"size":390,"mtime":1608850637136,"results":"82","hashOfConfig":"56"},{"size":419,"mtime":1609913346831,"results":"83","hashOfConfig":"56"},{"size":540,"mtime":1607529608604,"results":"84","hashOfConfig":"56"},{"size":394,"mtime":1608448546580,"results":"85","hashOfConfig":"56"},{"size":206,"mtime":1607342162060,"results":"86","hashOfConfig":"56"},{"size":4770,"mtime":1607430353516,"results":"87","hashOfConfig":"56"},{"size":3836,"mtime":1610356472899,"results":"88","hashOfConfig":"56"},{"size":1626,"mtime":1610349813009,"results":"89","hashOfConfig":"56"},{"size":213,"mtime":1607342531957,"results":"90","hashOfConfig":"56"},{"size":204,"mtime":1607342542038,"results":"91","hashOfConfig":"56"},{"size":5471,"mtime":1608852677675,"results":"92","hashOfConfig":"56"},{"size":5035,"mtime":1610354111429,"results":"93","hashOfConfig":"56"},{"size":2528,"mtime":1609913218191,"results":"94","hashOfConfig":"56"},{"size":2379,"mtime":1610267137497,"results":"95","hashOfConfig":"56"},{"size":98,"mtime":1610733891137,"results":"96","hashOfConfig":"56"},{"size":3558,"mtime":1610347837498,"results":"97","hashOfConfig":"56"},{"size":11600,"mtime":1610356264839,"results":"98","hashOfConfig":"56"},{"size":10365,"mtime":1610350599948,"results":"99","hashOfConfig":"56"},{"size":318,"mtime":1608852934388,"results":"100","hashOfConfig":"56"},{"size":3624,"mtime":1610275595190,"results":"101","hashOfConfig":"56"},{"size":3907,"mtime":1610440735107,"results":"102","hashOfConfig":"56"},{"size":1438,"mtime":1611364238145,"results":"103","hashOfConfig":"56"},{"size":261,"mtime":1611364236143,"results":"104","hashOfConfig":"56"},{"size":2716,"mtime":1610613869470,"results":"105","hashOfConfig":"56"},{"size":1630,"mtime":1610614530760,"results":"106","hashOfConfig":"56"},{"size":2975,"mtime":1610540007725,"results":"107","hashOfConfig":"56"},{"size":2915,"mtime":1611426491458,"results":"108","hashOfConfig":"56"},{"size":2145,"mtime":1611366674505,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"fw5a4t",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"112"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"112"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"112"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"112"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"112"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"112"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"112"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"112"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/index.js",[],["228","229"],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/App.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/index.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/router.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/counter.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplatesReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceTemplateListReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getNetworkTemplateListReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/updateSelectedServicesReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceMetadataReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getBuildIssuesReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getServiceConfigOptionsReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getBuildHistoryListReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/updateSelectedFilterTagsReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/getScriptTemplatesReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/buildStackReducer.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/middlewares/asyncDispatchMiddleware.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/reducers/middlewares/promiseMiddleware.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/constants.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceTemplates.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceTemplateList.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getNetworkTemplateList.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/updateSelectedServices.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getBuildHistoryList.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/checkBuildIssues.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceMetadata.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getScript.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/getServiceConfigOptions.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/updateFilterTags.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/buildStack.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/notFound/index.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/Sidebar/index.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/mainBuild/index.jsx",["230"],"// import React, { Fragment, useState, useEffect } from 'react';\nimport React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport ServiceGridItem from '../../features/servicesGridItem';\nimport BuildSidebar from '../../features/BuildSidebar';\nimport { getServiceTemplateListAction } from '../../actions/getServiceTemplateList.action';\nimport { getServiceTemplatesAction } from '../../actions/getServiceTemplates.action';\nimport { getNetworkTemplateListAction } from '../../actions/getNetworkTemplateList.action';\nimport {\n  getBuildOptions,\n  setBuildOptions,\n  buildOptionsInit,\n  setServiceOptions,\n  setTemporaryBuildOptions,\n  getTemporaryBuildOptions,\n  setTemporaryServiceOptions,\n  setupTemporaryBuildOptions,\n  saveTemporaryBuildOptions\n} from '../../utils/buildOptionSync';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetServiceTemplatesList: () => dispatch(getServiceTemplateListAction()),\n    dispatchGetNetworkTemplatesList: () => dispatch(getNetworkTemplateListAction()),\n    dispatchGetServiceTemplates: () => dispatch(getServiceTemplatesAction())\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    serviceTemplateList: selector(state => state.serviceTemplateList),\n    networkTemplateList: selector(state => state.networkTemplateList),\n    serviceTemplates: selector(state => state.serviceTemplates)\n  };\n};\n\nconst Main = (props) => {\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const {\n    dispatchGetServiceTemplatesList,\n    dispatchGetNetworkTemplatesList,\n    dispatchGetServiceTemplates,\n    serviceTemplateList,\n    networkTemplateList,\n    serviceTemplates\n  } = props;\n  const buildOptions = getBuildOptions();\n\n  useEffect(() => {\n    dispatchGetServiceTemplatesList();\n    dispatchGetNetworkTemplatesList();\n    dispatchGetServiceTemplates();\n  }, []);\n\n  return (\n    <Fragment>\n      <div  style={{ width: '100%' }}>\n        <Box display=\"flex\" p={1}>\n          <Box p={1} flexGrow={1}>\n            <Grid\n              container\n              justify=\"center\"\n            >\n              {Array.isArray(serviceTemplateList.payload) && serviceTemplateList.payload.map((templateName) => {\n                return (\n                  <Grid item\n                    key={templateName}\n                    display=\"flex\"\n                  >\n                    <ServiceGridItem\n                      serviceName={templateName}\n                      buildOptions={buildOptions}\n                      setBuildOptions={setBuildOptions}\n                      setServiceOptions={setServiceOptions}\n                      getBuildOptions={getBuildOptions}\n                      buildOptionsInit={buildOptionsInit}\n                      setTemporaryBuildOptions={setTemporaryBuildOptions}\n                      getTemporaryBuildOptions={getTemporaryBuildOptions}\n                      setTemporaryServiceOptions={setTemporaryServiceOptions}\n                      setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n                      saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n                      networkTemplateList={networkTemplateList}\n                      serviceTemplates={serviceTemplates?.payload ?? {}}\n                    />\n                  </Grid>\n                );\n              })}\n          </Grid>\n          </Box>\n          <Box p={1}>\n            <BuildSidebar\n              serviceTemplateList={serviceTemplateList}\n              networkTemplateList={networkTemplateList}\n              serviceTemplates={serviceTemplates?.payload ?? {}}\n            />\n          </Box>\n        </Box>\n\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Main;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/buildHistory/index.jsx",["231"],"// import React, { Fragment, useState, useEffect } from 'react';\nimport React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Grid from '@material-ui/core/Grid';\nimport BuildHistoryGridItem from '../../features/buildHistoryGridItem'\nimport {\n  getBuildHistoryListAction\n} from '../../actions/getBuildHistoryList.action';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetBuildHistoryList: () => dispatch(getBuildHistoryListAction())\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    buildHistory: selector(state => state.buildHistory)\n  };\n};\n\nconst Main = (props) => {\n\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const { dispatchGetBuildHistoryList, buildHistory } = props;\n\n  useEffect(() => {\n    dispatchGetBuildHistoryList();\n  }, []);\n\n  return (\n    <Fragment>\n      <div className=\"MainPage\">\n        <Grid\n          container\n          spacing={4}\n          justify=\"center\"\n        >\n          {typeof buildHistory.payload !== 'undefined' && Object.keys(buildHistory.payload.buildsList).map((buildDetailsTime) => {\n            return (\n              <Grid item\n                key={buildDetailsTime}\n                display=\"flex\"\n              >\n                <BuildHistoryGridItem\n                  buildTime={buildDetailsTime}\n                  buildDetails={buildHistory.payload.buildsList[buildDetailsTime]}\n                />\n              </Grid>\n            );\n          })}\n        </Grid>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Main;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/scripts/index.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/pages/help/index.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/builds.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/templates.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/services/configs.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/buildOptionSync.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/config.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/buildHistoryGridItem/index.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/servicesGridItem/index.jsx",["232"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ServiceConfigModal from '../serviceConfigModal';\nimport { useTheme } from '@material-ui/core/styles';\nimport {\n  getBuildIssuesAction\n} from '../../actions/checkBuildIssues.action';\nimport {\n  getServiceMetadataAction\n} from '../../actions/getServiceMetadata.action';\nimport {\n  getServiceConfigOptionsAction\n} from '../../actions/getServiceConfigOptions.action';\nimport {\n  addSelectedService,\n  removeSelectedService\n} from '../../actions/updateSelectedServices.action';\nimport styles from './services-grid-item.module.css';\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatchGetServiceMetadata: (serviceName) => dispatch(getServiceMetadataAction(serviceName)),\n    dispatchGetServiceConfigOptions: (serviceName) => dispatch(getServiceConfigOptionsAction(serviceName)),\n    dispatchGetBuildIssues: (selectedServices, serviceConfigurations) => dispatch(getBuildIssuesAction(selectedServices, serviceConfigurations)),\n    dispatchAddSelectedService: (serviceName) => dispatch(addSelectedService(serviceName)),\n    dispatchRemoveSelectedService: (serviceName) => dispatch(removeSelectedService(serviceName))\n  };\n};\n\nconst mapStateToProps = (selector) => {\n  return {\n    templateList: selector(state => state.templateList),\n    configServiceMetadata: selector(state => state.configServiceMetadata),\n    configServiceConfigOptions: selector(state => state.configServiceConfigOptions),\n    hideServiceTags: selector(state => state.hideServiceTags),\n    selectedServices: selector(state => state.selectedServices),\n    buildIssues: selector(state => state.buildIssues)\n  };\n};\n\nconst useStyles = makeStyles({\n  serviceCard: {\n    \"&:hover\": {\n      borderColor: ({ theme }) => theme.palette.text.primary\n    }\n  }\n});\n\nconst ServiceItem = (props) => {\n  const theme = useTheme();\n  const classes = useStyles({ props, theme });\n  // console.log('theme.palette', theme.palette)\n  props = {\n    ...props,\n    ...mapDispatchToProps(useDispatch()),\n    ...mapStateToProps(useSelector)\n  };\n\n  const {\n    serviceName,\n    networkTemplateList,\n    serviceTemplates,\n    dispatchGetServiceMetadata,\n    dispatchGetServiceConfigOptions,\n    dispatchAddSelectedService,\n    dispatchRemoveSelectedService,\n    dispatchGetBuildIssues,\n    configServiceMetadata,\n    configServiceConfigOptions,\n    selectedServices,\n    hideServiceTags,\n    buildIssues,\n    buildOptions,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions\n  } = props;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [serviceMetadata, setServiceMetadata] = useState({});\n  const [serviceMetadataError, setServiceMetadataError] = useState({});\n  useEffect(() => {\n    if (\n      typeof configServiceMetadata.services.completed[serviceName] === 'undefined'\n      && typeof configServiceMetadata.services.failed[serviceName] === 'undefined'\n      && !configServiceMetadata.services.pending.includes(serviceName)\n      && !isLoading\n    ) {\n      setIsLoading(true);\n      return void dispatchGetServiceMetadata(serviceName);\n    }\n\n    setIsLoading(false);\n\n    if (typeof configServiceMetadata.services.completed[serviceName] === 'object') {\n      setServiceMetadata(configServiceMetadata.services.completed[serviceName].payload);\n    } else if (!configServiceMetadata.services.pending.includes(serviceName)) {\n      setServiceMetadataError({\n        hasError: true\n      });\n    }\n  }, [\n    isLoading,\n    serviceName,\n    dispatchGetServiceMetadata,\n    configServiceMetadata.services.completed,\n    configServiceMetadata.services.pending,\n    configServiceMetadata.services.failed\n  ]);\n\n  const [serviceConfigOptions, setServiceConfigOptions] = useState({});\n  const [serviceConfigOptionsError, setServiceConfigOptionsError] = useState({});\n  useEffect(() => {\n    if (\n      typeof configServiceConfigOptions.services.completed[serviceName] === 'undefined'\n      && typeof configServiceConfigOptions.services.failed[serviceName] === 'undefined'\n      && !configServiceConfigOptions.services.pending.includes(serviceName)\n      && !isLoading\n    ) {\n      setIsLoading(true);\n      return void dispatchGetServiceConfigOptions(serviceName);\n    }\n\n    // setIsLoading(false);\n\n    if (typeof configServiceConfigOptions.services.completed[serviceName] === 'object') {\n      setServiceConfigOptions(configServiceConfigOptions.services.completed[serviceName].payload);\n    } else if (!configServiceConfigOptions.services.pending.includes(serviceName)) {\n      setServiceConfigOptionsError({\n        hasError: true\n      });\n    }\n  }, [\n    isLoading,\n    serviceName,\n    dispatchGetServiceConfigOptions,\n    configServiceConfigOptions.services.completed,\n    configServiceConfigOptions.services.pending,\n    configServiceConfigOptions.services.failed\n  ]);\n\n  const [updated, setIsUpdated] = useState(false);\n  useEffect(() => {\n    if (updated) {\n      dispatchGetBuildIssues(selectedServices.selectedServices, {});\n    }\n    setIsUpdated(false);\n  }, [\n    updated,\n    serviceName,\n    selectedServices.selectedServices,\n    dispatchGetBuildIssues\n  ]);\n\n  const [hasIssue, setHasIssue] = useState(false);\n  useEffect(() => {\n    if (!selectedServices.selectedServices.includes(serviceName)) {\n      return void setHasIssue(false);\n    }\n    const issueList = buildIssues?.payload?.issueList ?? {};\n    if (Array.isArray(issueList.services)) {\n      issueList.services.forEach((service) => {\n        if (service.name === serviceName) {\n          return void setHasIssue(true);\n        }\n      });\n    }\n  }, [buildIssues, selectedServices.selectedServices, serviceName]);\n\n  const handleBuildSelectChange = (evt) => {\n    setIsUpdated(true);\n    if (evt.target.checked) {\n      return dispatchAddSelectedService(serviceName);\n    }\n    return dispatchRemoveSelectedService(serviceName);\n  }\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const serviceComponent = () => {\n    return (\n      <Box\n        p={1}\n        m={1}\n        justifyContent=\"center\"\n      >\n        <ServiceConfigModal\n          isOpen={modalOpen}\n          handleClose={() => setModalOpen(false)}\n          serviceMetadata={serviceMetadata}\n          serviceConfigOptions={serviceConfigOptions}\n          serviceName={serviceName}\n          buildOptions={buildOptions}\n          setBuildOptions={setBuildOptions}\n          setServiceOptions={setServiceOptions}\n          getBuildOptions={getBuildOptions}\n          buildOptionsInit={buildOptionsInit}\n          setTemporaryBuildOptions={setTemporaryBuildOptions}\n          getTemporaryBuildOptions={getTemporaryBuildOptions}\n          setTemporaryServiceOptions={setTemporaryServiceOptions}\n          setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n          saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n          networkTemplateList={networkTemplateList}\n          serviceTemplates={serviceTemplates}\n        />\n        <Box display=\"flex\" p={1} justifyContent=\"center\" fontSize=\"2rem\">{serviceMetadata.displayName}</Box>\n        <Box display=\"flex\" p={1} justifyContent=\"center\">\n          {!serviceMetadata.iconUri\n          && (\n            <Tooltip title=\"Service icon not provided in config\">\n              <ErrorOutlineOutlinedIcon style={{ fontSize: '6rem' }} />\n            </Tooltip>\n          )}\n          {serviceMetadata.iconUri\n          && (\n            <Tooltip title={`${serviceMetadata.displayName} icon`}>\n              <div className={styles.serviceIconContainer}>\n                <img className={styles.serviceIcon} src={serviceMetadata.iconUri} alt={`${serviceMetadata.displayName} icon`} />\n              </div>\n            </Tooltip>\n          )}\n        </Box>\n        <Box display=\"flex\" p={1} m={1} justifyContent=\"center\">\n          <Button variant=\"contained\" onClick={() => setModalOpen(true)}>{serviceMetadata.displayName} Configuration</Button>\n        </Box>\n        <Box display=\"flex\" p={1} justifyContent=\"center\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={selectedServices.selectedServices.includes(serviceName)}\n                onChange={handleBuildSelectChange}\n                name={`chkBuild${serviceName}`}\n                color=\"primary\"\n              />\n            }\n            label={`Add ${serviceMetadata.displayName} to build`}\n          />\n        </Box>\n        <Box display=\"flex\" m={1} justifyContent=\"center\">\n          <Link\n            href=\"#\"\n            rel=\"noopener\"\n            target=\"_blank\"\n            className={styles.docsLink}\n            color=\"inherit\"\n          >\n            {serviceMetadata.displayName} Help and Docs\n          </Link>\n        </Box>\n      </Box>\n    )\n  };\n\n  const errorComponent = () => {\n    return (\n      <Fragment>\n        <div>Error loading: {serviceName}</div>\n        <div>Try refreshing, and ensuring the API server is running correctly.</div>\n      </Fragment>\n    )\n  };\n\n  const loadingComponent = () => {\n    return (\n      <Fragment>\n        Loading '{serviceName}' metadata...\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'6rem'} width={'80%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" m={1} p={1} >\n          <Skeleton variant=\"circle\" width={120} height={120} />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'3rem'} width={'70%'} variant=\"text\" />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Skeleton height={'4rem'} width={'90%'} variant=\"text\" />\n        </Box>\n      </Fragment>\n    )\n  };\n\n  const highlightClass = () => {\n    if (selectedServices.selectedServices.includes(serviceName)) {\n      if (hasIssue) {\n        return styles.serviceError;\n      } else {\n        return styles.selectedForBuild;\n      }\n    }\n\n    return '';\n  };\n\n  const tagIsHidden = (hiddenTags, serviceTags) => {\n    let hide = false;\n\n    hiddenTags.forEach((hiddenTag) => {\n      serviceTags.forEach((serviceTag) => {\n        if (hiddenTag === serviceTag) {\n          hide = true;\n        }\n      });\n    });\n\n    return hide;\n  }\n\n  if (!isLoading && tagIsHidden(hideServiceTags.hideServiceTags, serviceMetadata.serviceTypeTags)) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <Box\n        className={`${styles.serviceCard} ${classes.serviceCard} ${highlightClass()}`}\n        borderRadius=\"borderRadius\"\n        borderColor=\"primary.main\"\n        margin={1}\n        border={1}\n      >\n        {isLoading\n        && (loadingComponent())}\n        {!isLoading\n        && serviceMetadata.displayName\n        && (\n          serviceComponent()\n        )}\n        {!isLoading\n        && serviceMetadataError.hasError === true\n        && (\n          errorComponent()\n        )}\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default ServiceItem;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/BuildSidebar/index.jsx",["233","234"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Box from '@material-ui/core/Box';\n// import Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\n// import ErrorOutlineOutlinedIcon from '@material-ui/icons/ErrorOutlineOutlined';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\nimport styles from './build-sidebar.module.css';\nimport {\n  addTagToHideListAction,\n  removeTagFromHideListAction\n} from '../../actions/updateFilterTags.action';\nimport {\n  createAndBuildStackAction\n} from '../../actions/buildStack.action';\nimport {\n  getScriptFromTemplateAction\n} from '../../actions/getScript.action';\nimport {\n  downloadBuildFile\n} from '../../actions/downloadBuild.action';\nimport BuildCompletedModal from '../buildCompletedModal';\nimport { API_STATUS } from '../../constants'\n\n// const useStyles = makeStyles({\n//   serviceCard: {\n//     \"&:hover\": {\n//       borderColor: ({ theme }) => theme.palette.text.primary\n//     }\n//   }\n// });\n\nconst getUniqueTagsFromTemplates = ({ serviceTemplateListPayload, metadataList }) => {\n  const tagList = [];\n  if (Array.isArray(serviceTemplateListPayload)) {\n    serviceTemplateListPayload.forEach((service) => {\n      if (metadataList[service] && metadataList[service].payload && Array.isArray(metadataList[service].payload.serviceTypeTags)) {\n        metadataList[service].payload.serviceTypeTags.forEach((tag) => {\n          if (!tagList.includes(tag)) {\n            tagList.push(tag);\n          }\n        });\n      }\n    });\n  }\n  tagList.sort();\n  return tagList;\n};\n\nconst buildIssueListItem = (name, issueType, issueText) => {\n  return (\n    <Box><strong>{name} [{issueType}]</strong> - {issueText}</Box>\n  );\n};\n\nconst buildIssuesRender = (issues) => {\n  const unknownError = !(\n    issues.payload\n    && issues.payload.issueList\n    && Array.isArray(issues.payload.issueList.services)\n    && Array.isArray(issues.payload.issueList.networks)\n    && Array.isArray(issues.payload.issueList.other)\n  );\n\n  const noIssues = (\n    !unknownError\n    && issues.payload.issueList.services.length === 0\n    && issues.payload.issueList.networks.length === 0\n    && issues.payload.issueList.other.length === 0\n  );\n\n  return (\n    <Box className={styles.section}>\n      Build Issues:\n      <Box>\n        {issues.status === API_STATUS.SUCCESS\n        && (\n          <Fragment>\n            {Array.isArray(issues.payload.issueList.services)\n            && issues.payload.issueList.services.length > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Services:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.services.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {Array.isArray(issues.payload.issueList.networks)\n            && issues.payload.issueList.networks.length > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Networks:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.networks.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {Array.isArray(issues.payload.issueList.other)\n            && issues.payload.issueList.other.length > 0\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  Other Issues:\n                  <Box>\n                    <ul>\n                      {issues.payload.issueList.other.map((issue) => {\n                        return (\n                          <li key={`${issue.issueType}${issue.name}${issue.message}`}>\n                            {buildIssueListItem(issue.name, issue.issueType, issue.message)}\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </Box>\n                </Box>\n              </Box>\n            )}\n            {noIssues\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  No build issues\n                </Box>\n              </Box>\n            )}\n            {!noIssues\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  You can still attempt to build when issues are reported.\n                </Box>\n              </Box>\n            )}\n            {unknownError\n            && (\n              <Box paddingTop={2}>\n                <Box>\n                  An unknown error occured retrieving build issues\n                </Box>\n              </Box>\n            )}\n          </Fragment>\n        )}\n        {issues.status === API_STATUS.PENDING\n        && (\n          <Fragment>Loading...</Fragment>\n        )}\n        {issues.status === API_STATUS.FAILURE\n        && (\n          <Fragment>Failed to get build issues from API</Fragment>\n        )}\n        {issues.status === API_STATUS.UNINIT\n        && (\n          <Fragment>No changes detected</Fragment>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nconst buildList = (selectedServices) => {\n  return (\n    <Box className={styles.section}>\n      Building Services:\n      <Box>\n        {selectedServices.join(', ')}\n      </Box>\n    </Box>\n  );\n};\n\nconst buildServices = (dispatchBuildStack) => {\n  return (\n    <Box className={styles.section}>\n      Build:\n      <Box>\n        <Button variant=\"contained\" onClick={dispatchBuildStack}>Build</Button>\n      </Box>\n    </Box>\n  );\n};\n\nconst Sidebar = (props) => {\n  // const theme = useTheme();\n  // const classes = useStyles({ props, theme });\n\n  const mapStateToProps = (selector) => {\n    return {\n      configServiceMetadata: selector(state => state.configServiceMetadata),\n      hideServiceTags: selector(state => state.hideServiceTags),\n      selectedServices: selector(state => state.selectedServices),\n      buildIssues: selector(state => state.buildIssues),\n      buildStack: selector(state => state.buildStack),\n      scriptTemplates: selector(state => state.scriptTemplates)\n    };\n  };\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      dispatchAddTagToHideList: (tag) => dispatch(addTagToHideListAction(tag)),\n      dispatchRemoveTagFromHideList: (tag) => dispatch(removeTagFromHideListAction(tag)),\n      dispatchBuildStack: (selectedServices, serviceConfigurations) => dispatch(createAndBuildStackAction(selectedServices, serviceConfigurations)),\n      dispatchGetScriptTemplates: ({ scriptName, options, linkRef }) => dispatch(getScriptFromTemplateAction({ scriptName, options, linkRef })),\n      dispatchDownloadBuildFile: ({ build, type, linkRef }) => dispatch(downloadBuildFile({ build, type, linkRef }))\n    };\n  };\n  \n  props = {\n    ...props,\n    ...mapStateToProps(useSelector),\n    ...mapDispatchToProps(useDispatch()),\n  };\n\n  const [modalOpen, setModalOpen] = useState(false);\n  useEffect(() => {\n    if (props.buildStack.status === API_STATUS.SUCCESS) {\n      setModalOpen(true);\n    }\n  }, [\n    props.buildStack\n  ]);\n\n  const {\n    serviceTemplateList,\n    configServiceMetadata,\n    selectedServices,\n    buildIssues,\n    hideServiceTags,\n    dispatchRemoveTagFromHideList,\n    dispatchAddTagToHideList,\n    dispatchBuildStack,\n    dispatchGetScriptTemplates,\n    dispatchDownloadBuildFile,\n    buildStack,\n    scriptTemplates\n  } = props;\n\n  const downloadLinkRef = React.useRef(null);\n\n  const handleBuildSelectChange = (evt, tagName) => {\n    if (evt.target.checked) {\n      return dispatchAddTagToHideList(tagName);\n    }\n    return dispatchRemoveTagFromHideList(tagName);\n  };\n\n  const serviceFilter = (serviceTemplateListPayload, servicesMetadata) => {\n    return (\n      <Box className={styles.section}>\n        Hide by tag:\n        <Box>\n          {\n            getUniqueTagsFromTemplates({ serviceTemplateListPayload, metadataList: servicesMetadata }).map((tag) => {\n              return (\n                <FormControlLabel\n                key={tag}\n                control={\n                  <Checkbox\n                    checked={hideServiceTags.hideServiceTags.indexOf(tag) > -1}\n                    onChange={(evt) => handleBuildSelectChange(evt, tag)}\n                    name=\"checkedB\"\n                    color=\"primary\"\n                  />\n                }\n                label={tag}\n              />\n              );\n            })\n          }\n        </Box>\n      </Box>\n    );\n  };\n  \n  return (\n    <Fragment>\n      <a ref={downloadLinkRef} />\n      <BuildCompletedModal\n        isOpen={modalOpen}\n        handleClose={() => setModalOpen(false)}\n        buildStack={buildStack}\n        scriptTemplates={scriptTemplates}\n        dispatchGetScriptTemplates={dispatchGetScriptTemplates}\n        dispatchDownloadBuildFile={dispatchDownloadBuildFile}\n        downloadLinkRef={downloadLinkRef}\n      />\n      <Box\n        py=\"2rem\"\n        border={1}\n        className={`${styles.sidebarWrapper}`}\n      >\n        {serviceFilter(serviceTemplateList.payload, configServiceMetadata.services.completed)}\n        <Divider />\n        {buildIssuesRender(buildIssues)}\n        <Divider />\n        {buildList(selectedServices.selectedServices)}\n        <Divider />\n        {buildServices(() => {\n          if (Array.isArray(selectedServices.selectedServices) && selectedServices.selectedServices.length > 0) {\n            dispatchBuildStack(selectedServices.selectedServices);\n          }\n        })}\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default Sidebar;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/actions/downloadBuild.action.js",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/buildCompletedModal/index.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceConfigModal/index.jsx",["235","236","237","238"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Grid from '@material-ui/core/Grid';\nimport Button from \"@material-ui/core/Button\";\nimport Box from '@material-ui/core/Box';\nimport getConfigComponents from '../../utils/configOptionLoader';\nimport {\n  deleteTemporaryBuildOptions,\n  saveTemporaryBuildOptions\n} from '../../utils/buildOptionSync';\n\nconst getModalStyle = () => {\n  const top = 10;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    maxHeight: '75%',\n    overflow: 'hidden',\n    overflowY: 'scroll',\n    transform: `translate(-50%, 0%)`,\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: '50%',\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nconst ServiceConfigModal = (props) => {\n  const {\n    isOpen,\n    handleClose,\n    serviceName,\n    networkTemplateList,\n    serviceMetadata,\n    serviceConfigOptions,\n    buildOptions,\n    serviceTemplates,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions\n  } = props;\n\n  const closeModal = (event) => {\n    deleteTemporaryBuildOptions();\n    if (typeof handleClose === 'function') {\n      handleClose(event);\n    }\n  }\n\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">{serviceMetadata ? serviceMetadata.displayName : ''} ({serviceName}) Configuration</h2>\n      <Fragment>\n        {getConfigComponents(serviceConfigOptions ?? []).map((ConfigComponent, index) => {\n          return (\n            <Box\n              key={index}\n              mt=\"2rem\"\n              mb=\"2rem\"\n              p={2}\n              borderRadius=\"borderRadius\"\n              border={1}\n              borderColor=\"grey.500\"\n            >\n              <ConfigComponent\n                networkTemplateList={networkTemplateList}\n                setBuildOptions={setBuildOptions}\n                setServiceOptions={setServiceOptions}\n                getBuildOptions={getBuildOptions}\n                buildOptionsInit={buildOptionsInit}\n                setTemporaryBuildOptions={setTemporaryBuildOptions}\n                getTemporaryBuildOptions={getTemporaryBuildOptions}\n                setTemporaryServiceOptions={setTemporaryServiceOptions}\n                setupTemporaryBuildOptions={setupTemporaryBuildOptions}\n                saveTemporaryBuildOptions={saveTemporaryBuildOptions}\n                serviceMetadata={serviceMetadata}\n                serviceName={serviceName}\n                serviceConfigOptions={serviceConfigOptions}\n                serviceTemplates={serviceTemplates}\n              />\n            </Box>\n          );\n        })}\n        <Box pt={\"1rem\"}>\n          <Grid container item xs={12} spacing={3} >\n            <Grid item xs={7} md={6}>\n              <Button variant=\"contained\" onClick={(evt) => { saveTemporaryBuildOptions(); closeModal(evt); }}>Save and Close</Button>\n            </Grid>\n            <Grid item xs={7} md={6}>\n              <Button variant=\"contained\" onClick={(evt) => { closeModal(evt); }}>Cancel and Close</Button>\n            </Grid>\n          </Grid>\n        </Box>\n      </Fragment>\n      <ServiceConfigModal />\n    </div>\n  );\n\n  return (\n    <Modal\n      open={isOpen || false}\n      onClose={closeModal}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      {body}\n    </Modal>\n  );\n};\n\nexport default ServiceConfigModal;","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/configOptionLoader.jsx",[],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/index.js",["239"],"import PortConfig from './general/portConfig';\nimport NetworkConfig from './general/networkConfig';\nimport Logging from './general/logging';\nimport Volumes from './general/volumesConfig';\n\nexport default {\n  PortConfig,\n  NetworkConfig,\n  Logging,\n  Volumes\n};\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/networkConfig.jsx",["240","241","242","243","244","245","246","247","248","249"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst NetworkConfig = (props) => {\n  const {\n    serviceConfigOptions,\n    serviceName,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    networkTemplateList,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [modifiedNetworkList, setModifiedNetworkList] = useState({});\n  useEffect(() => {\n    const defaultOnNetworks = { ...getBuildOptions()?.services?.[serviceName]?.networks ?? {} };\n    serviceTemplates[serviceName]?.networks?.forEach((networkName) => {\n      defaultOnNetworks[networkName] = true;\n    });\n    setModifiedNetworkList({\n      ...defaultOnNetworks\n    });\n  }, []);\n\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      networks: modifiedNetworkList\n    });\n  }, [\n    modifiedNetworkList\n  ]);\n\n  const onChangeCb = (networkName, event) => {\n    const networkSelected = event.target.checked;\n    setModifiedNetworkList({\n      ...modifiedNetworkList,\n      [networkName]: networkSelected\n    });\n    if (typeof(onChange) === 'function') {\n      onChange(networkName, networkName);\n    }\n  };\n\n  const defaultValue = (networkName) => {\n    return (serviceTemplates[serviceName]?.networks ?? []).includes(networkName);\n  };\n\n  return (\n    <Fragment>\n      IOTstack Networks:\n      <Grid container spacing={3} justify=\"space-between\">\n        {(networkTemplateList?.payload ?? []).map((networkName) => {\n          return (\n            <Grid\n              item\n              xs={12}\n              md={5}\n              lg={4}\n              xl={2}\n              key={networkName}\n            >\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={modifiedNetworkList?.[networkName] ?? defaultValue(networkName)}\n                    onChange={(evt) => onChangeCb(networkName, evt) }\n                    name={networkName}\n                    color=\"primary\"\n                  />\n                }\n                label={networkName}\n              />\n            </Grid>\n          );\n        }).filter((ele) => {\n          return ele !== null;\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default NetworkConfig;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/logging.jsx",["250","251","252","253","254","255","256","257","258","259"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\n\nconst PortConfig = (props) => {\n\n  const {\n    serviceConfigOptions,\n    serviceName,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [loggingEnabled, setLoggingEnabled] = useState(getBuildOptions()?.services?.[serviceName]?.loggingEnabled ?? true);\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      loggingEnabled\n    });\n  }, [\n    loggingEnabled\n  ]);\n\n  const onChangeCb = (event) => {\n    const newSetting = event.target.checked;\n    setLoggingEnabled(newSetting);\n    if (typeof(onChange) === 'function') {\n      onChange(newSetting);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Box>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={loggingEnabled}\n              onChange={(evt) => onChangeCb(evt) }\n              name={\"logging\"}\n              color=\"primary\"\n            />\n          }\n          label={`Enable Logging for ${serviceName}`}\n        />\n      </Box>\n    </Fragment>\n  );\n};\n\nexport default PortConfig;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/portConfig.jsx",["260","261","262","263","264","265","266"],"import React, { Fragment, useState, useEffect } from 'react';\n// import Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  getExternalPort,\n  replaceExternalPort,\n  getInternalPort\n} from '../../../utils/parsers';\n\nconst PortConfig = (props) => {\n\n  const {\n    serviceConfigOptions,\n    serviceName,\n    setBuildOptions,\n    getBuildOptions,\n    buildOptionsInit,\n    setServiceOptions,\n    setTemporaryBuildOptions,\n    getTemporaryBuildOptions,\n    setTemporaryServiceOptions,\n    setupTemporaryBuildOptions,\n    saveTemporaryBuildOptions,\n    serviceTemplates,\n    onChange\n  } = props;\n\n  const tempBuildOptions = getTemporaryBuildOptions();\n\n  const [portSettings, setPortSettings] = useState(getBuildOptions()?.services?.[serviceName]?.ports || {});\n  useEffect(() => {\n    setTemporaryServiceOptions(serviceName, {\n      ...getTemporaryBuildOptions()?.services?.[serviceName] ?? {},\n      ports: portSettings\n    });\n  }, [\n    portSettings\n  ]);\n\n  const onChangeCb = (portKey, portLabelValue, event) => {\n    const newPort = event.target.value;\n    // const defaultTemplatePort = defaultValue(portKey, portKey);\n    setPortSettings({\n      ...portSettings,\n      [portKey]: replaceExternalPort((portSettings[portKey] || portKey), newPort)\n    });\n    if (typeof(onChange) === 'function') {\n      onChange(portKey, portLabelValue, newPort);\n    }\n  };\n\n  const defaultValue = (portValueKey, defaultValue) => {\n    const servicePorts = tempBuildOptions?.services?.[serviceName] ?? {};\n    return servicePorts?.ports?.[portValueKey] ?? defaultValue;\n  };\n\n  return (\n    <Fragment>\n      <Grid container spacing={3}>\n        {serviceConfigOptions && Object.keys(serviceConfigOptions.labeledPorts).map((portValueKey) => {\n          const currentPortSetting = portSettings[portValueKey] || defaultValue(portValueKey, portValueKey);\n          if ((serviceTemplates[serviceName]?.ports?.[portValueKey] ?? []).indexOf(portValueKey)) { // Only show ports that exist in the YAML template\n            return (\n              <Grid\n                item\n                xs={12}\n                md={6}\n                lg={3}\n                key={serviceConfigOptions.labeledPorts[portValueKey]}\n              >\n                <TextField\n                  id={`portConfig_${serviceConfigOptions.labeledPorts[portValueKey]}`}\n                  label={`Port: ${serviceConfigOptions.labeledPorts[portValueKey]} (${getInternalPort(defaultValue(portValueKey, portValueKey))})`}\n                  onChange={(event) => { onChangeCb(portValueKey, serviceConfigOptions.labeledPorts[portValueKey], event) }}\n                  value={getExternalPort(currentPortSetting)}\n                />\n              </Grid>\n            );\n          }\n\n          return null;\n        }).filter((ele) => {\n          return ele !== null;\n        })}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default PortConfig;\n","/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/features/serviceUiControls/general/volumesConfig.jsx",["267","268","269","270","271","272","273","274","275","276","277","278","279"],"/c/Users/Slyke/Documents/repos/IOTstack/.internal/wui/src/utils/parsers.js",[],{"ruleId":"280","replacedBy":"281"},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","severity":1,"message":"285","line":60,"column":6,"nodeType":"286","endLine":60,"endColumn":8,"suggestions":"287"},{"ruleId":"284","severity":1,"message":"288","line":34,"column":6,"nodeType":"286","endLine":34,"endColumn":8,"suggestions":"289"},{"ruleId":"290","severity":1,"message":"291","line":127,"column":10,"nodeType":"292","messageId":"293","endLine":127,"endColumn":35},{"ruleId":"294","severity":1,"message":"295","line":300,"column":7,"nodeType":"296","endLine":300,"endColumn":34},{"ruleId":"297","severity":1,"message":"298","line":300,"column":7,"nodeType":"296","endLine":300,"endColumn":34},{"ruleId":"290","severity":1,"message":"299","line":1,"column":27,"nodeType":"292","messageId":"293","endLine":1,"endColumn":35},{"ruleId":"290","severity":1,"message":"300","line":1,"column":37,"nodeType":"292","messageId":"293","endLine":1,"endColumn":46},{"ruleId":"290","severity":1,"message":"301","line":10,"column":3,"nodeType":"292","messageId":"293","endLine":10,"endColumn":28},{"ruleId":"290","severity":1,"message":"302","line":46,"column":5,"nodeType":"292","messageId":"293","endLine":46,"endColumn":17},{"ruleId":"303","severity":1,"message":"304","line":6,"column":1,"nodeType":"305","endLine":11,"endColumn":3},{"ruleId":"290","severity":1,"message":"306","line":9,"column":5,"nodeType":"292","messageId":"293","endLine":9,"endColumn":25},{"ruleId":"290","severity":1,"message":"307","line":11,"column":5,"nodeType":"292","messageId":"293","endLine":11,"endColumn":20},{"ruleId":"290","severity":1,"message":"308","line":13,"column":5,"nodeType":"292","messageId":"293","endLine":13,"endColumn":21},{"ruleId":"290","severity":1,"message":"309","line":14,"column":5,"nodeType":"292","messageId":"293","endLine":14,"endColumn":22},{"ruleId":"290","severity":1,"message":"310","line":16,"column":5,"nodeType":"292","messageId":"293","endLine":16,"endColumn":29},{"ruleId":"290","severity":1,"message":"311","line":19,"column":5,"nodeType":"292","messageId":"293","endLine":19,"endColumn":31},{"ruleId":"290","severity":1,"message":"312","line":20,"column":5,"nodeType":"292","messageId":"293","endLine":20,"endColumn":30},{"ruleId":"290","severity":1,"message":"313","line":25,"column":9,"nodeType":"292","messageId":"293","endLine":25,"endColumn":25},{"ruleId":"284","severity":1,"message":"314","line":36,"column":6,"nodeType":"286","endLine":36,"endColumn":8,"suggestions":"315"},{"ruleId":"284","severity":1,"message":"316","line":43,"column":6,"nodeType":"286","endLine":45,"endColumn":4,"suggestions":"317"},{"ruleId":"290","severity":1,"message":"306","line":10,"column":5,"nodeType":"292","messageId":"293","endLine":10,"endColumn":25},{"ruleId":"290","severity":1,"message":"307","line":12,"column":5,"nodeType":"292","messageId":"293","endLine":12,"endColumn":20},{"ruleId":"290","severity":1,"message":"308","line":14,"column":5,"nodeType":"292","messageId":"293","endLine":14,"endColumn":21},{"ruleId":"290","severity":1,"message":"309","line":15,"column":5,"nodeType":"292","messageId":"293","endLine":15,"endColumn":22},{"ruleId":"290","severity":1,"message":"310","line":16,"column":5,"nodeType":"292","messageId":"293","endLine":16,"endColumn":29},{"ruleId":"290","severity":1,"message":"311","line":19,"column":5,"nodeType":"292","messageId":"293","endLine":19,"endColumn":31},{"ruleId":"290","severity":1,"message":"312","line":20,"column":5,"nodeType":"292","messageId":"293","endLine":20,"endColumn":30},{"ruleId":"290","severity":1,"message":"318","line":21,"column":5,"nodeType":"292","messageId":"293","endLine":21,"endColumn":21},{"ruleId":"290","severity":1,"message":"313","line":25,"column":9,"nodeType":"292","messageId":"293","endLine":25,"endColumn":25},{"ruleId":"284","severity":1,"message":"316","line":33,"column":6,"nodeType":"286","endLine":35,"endColumn":4,"suggestions":"319"},{"ruleId":"290","severity":1,"message":"307","line":16,"column":5,"nodeType":"292","messageId":"293","endLine":16,"endColumn":20},{"ruleId":"290","severity":1,"message":"308","line":18,"column":5,"nodeType":"292","messageId":"293","endLine":18,"endColumn":21},{"ruleId":"290","severity":1,"message":"309","line":19,"column":5,"nodeType":"292","messageId":"293","endLine":19,"endColumn":22},{"ruleId":"290","severity":1,"message":"310","line":20,"column":5,"nodeType":"292","messageId":"293","endLine":20,"endColumn":29},{"ruleId":"290","severity":1,"message":"311","line":23,"column":5,"nodeType":"292","messageId":"293","endLine":23,"endColumn":31},{"ruleId":"290","severity":1,"message":"312","line":24,"column":5,"nodeType":"292","messageId":"293","endLine":24,"endColumn":30},{"ruleId":"284","severity":1,"message":"316","line":37,"column":6,"nodeType":"286","endLine":39,"endColumn":4,"suggestions":"320"},{"ruleId":"290","severity":1,"message":"306","line":14,"column":5,"nodeType":"292","messageId":"293","endLine":14,"endColumn":25},{"ruleId":"290","severity":1,"message":"307","line":16,"column":5,"nodeType":"292","messageId":"293","endLine":16,"endColumn":20},{"ruleId":"290","severity":1,"message":"308","line":18,"column":5,"nodeType":"292","messageId":"293","endLine":18,"endColumn":21},{"ruleId":"290","severity":1,"message":"309","line":19,"column":5,"nodeType":"292","messageId":"293","endLine":19,"endColumn":22},{"ruleId":"290","severity":1,"message":"310","line":20,"column":5,"nodeType":"292","messageId":"293","endLine":20,"endColumn":29},{"ruleId":"290","severity":1,"message":"321","line":22,"column":5,"nodeType":"292","messageId":"293","endLine":22,"endColumn":31},{"ruleId":"290","severity":1,"message":"311","line":23,"column":5,"nodeType":"292","messageId":"293","endLine":23,"endColumn":31},{"ruleId":"290","severity":1,"message":"312","line":24,"column":5,"nodeType":"292","messageId":"293","endLine":24,"endColumn":30},{"ruleId":"290","severity":1,"message":"318","line":25,"column":5,"nodeType":"292","messageId":"293","endLine":25,"endColumn":21},{"ruleId":"290","severity":1,"message":"322","line":26,"column":5,"nodeType":"292","messageId":"293","endLine":26,"endColumn":13},{"ruleId":"290","severity":1,"message":"313","line":29,"column":9,"nodeType":"292","messageId":"293","endLine":29,"endColumn":25},{"ruleId":"290","severity":1,"message":"323","line":32,"column":10,"nodeType":"292","messageId":"293","endLine":32,"endColumn":24},{"ruleId":"290","severity":1,"message":"324","line":32,"column":26,"nodeType":"292","messageId":"293","endLine":32,"endColumn":43},"no-native-reassign",["325"],"no-negated-in-lhs",["326"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatchGetNetworkTemplatesList', 'dispatchGetServiceTemplates', and 'dispatchGetServiceTemplatesList'. Either include them or remove the dependency array.","ArrayExpression",["327"],"React Hook useEffect has a missing dependency: 'dispatchGetBuildHistoryList'. Either include it or remove the dependency array.",["328"],"no-unused-vars","'serviceConfigOptionsError' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","'useEffect' is defined but never used.","'saveTemporaryBuildOptions' is defined but never used.","'buildOptions' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'serviceConfigOptions' is assigned a value but never used.","'setBuildOptions' is assigned a value but never used.","'buildOptionsInit' is assigned a value but never used.","'setServiceOptions' is assigned a value but never used.","'setTemporaryBuildOptions' is assigned a value but never used.","'setupTemporaryBuildOptions' is assigned a value but never used.","'saveTemporaryBuildOptions' is assigned a value but never used.","'tempBuildOptions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getBuildOptions', 'serviceName', and 'serviceTemplates'. Either include them or remove the dependency array.",["329"],"React Hook useEffect has missing dependencies: 'getTemporaryBuildOptions', 'serviceName', and 'setTemporaryServiceOptions'. Either include them or remove the dependency array.",["330"],"'serviceTemplates' is assigned a value but never used.",["331"],["332"],"'setTemporaryServiceOptions' is assigned a value but never used.","'onChange' is assigned a value but never used.","'volumeSettings' is assigned a value but never used.","'setVolumeSettings' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},"Update the dependencies array to be: [dispatchGetNetworkTemplatesList, dispatchGetServiceTemplates, dispatchGetServiceTemplatesList]",{"range":"345","text":"346"},"Update the dependencies array to be: [dispatchGetBuildHistoryList]",{"range":"347","text":"348"},"Update the dependencies array to be: [getBuildOptions, serviceName, serviceTemplates]",{"range":"349","text":"350"},"Update the dependencies array to be: [getTemporaryBuildOptions, modifiedNetworkList, serviceName, setTemporaryServiceOptions]",{"range":"351","text":"352"},"Update the dependencies array to be: [getTemporaryBuildOptions, loggingEnabled, serviceName, setTemporaryServiceOptions]",{"range":"353","text":"354"},"Update the dependencies array to be: [getTemporaryBuildOptions, portSettings, serviceName, setTemporaryServiceOptions]",{"range":"355","text":"356"},[2011,2013],"[dispatchGetNetworkTemplatesList, dispatchGetServiceTemplates, dispatchGetServiceTemplatesList]",[893,895],"[dispatchGetBuildHistoryList]",[1109,1111],"[getBuildOptions, serviceName, serviceTemplates]",[1298,1327],"[getTemporaryBuildOptions, modifiedNetworkList, serviceName, setTemporaryServiceOptions]",[991,1015],"[getTemporaryBuildOptions, loggingEnabled, serviceName, setTemporaryServiceOptions]",[1020,1042],"[getTemporaryBuildOptions, portSettings, serviceName, setTemporaryServiceOptions]"]